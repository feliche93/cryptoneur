{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypePrettyCode from 'rehype-pretty-code'\nimport rehypeSlug from 'rehype-slug'\nimport remarkGfm from 'remark-gfm'\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  slug: {\n    type: 'string',\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\n  },\n  locale: {\n    type: 'enum',\n    of: ['en', 'de', null],\n    resolve: (doc) => {\n      const locale = doc._raw.flattenedPath.split('/')[0]\n      return ['en', 'de'].includes(locale) ? locale : null\n    },\n  },\n}\n\n// export const Page = defineDocumentType(() => ({\n//   name: 'Page',\n//   filePathPattern: `pages/**/*.mdx`,\n//   contentType: 'mdx',\n//   fields: {\n//     title: {\n//       type: 'string',\n//       required: true,\n//     },\n//     description: {\n//       type: 'string',\n//     },\n//   },\n//   computedFields,\n// }))\n\nexport const Page = defineDocumentType(() => ({\n  name: 'Page',\n  filePathPattern: `**/pages/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      description: 'The title of the post',\n      type: 'string',\n      required: true,\n    },\n    description: {\n      description: 'The description of the post',\n      type: 'string',\n    },\n    metaTitle: {\n      description: 'The meta title',\n      type: 'string',\n    },\n    metaDescription: {\n      description: 'The meta description',\n      type: 'string',\n    },\n    keywords: {\n      description: 'Keywords for blogpost',\n      type: 'list',\n      of: { type: 'string' },\n    },\n    date: {\n      type: 'date',\n      required: true,\n    },\n    published: {\n      type: 'boolean',\n      default: true,\n    },\n    featured: {\n      type: 'boolean',\n      default: false,\n    },\n    image: {\n      type: 'string',\n      required: false,\n    },\n  },\n  computedFields,\n}))\n\n// export const Doc = defineDocumentType(() => ({\n//   name: 'Doc',\n//   filePathPattern: `docs/**/*.mdx`,\n//   contentType: 'mdx',\n//   fields: {\n//     title: {\n//       type: 'string',\n//       required: true,\n//     },\n//     description: {\n//       type: 'string',\n//     },\n//     published: {\n//       type: 'boolean',\n//       default: true,\n//     },\n//   },\n//   computedFields,\n// }))\n\n// export const Guide = defineDocumentType(() => ({\n//   name: 'Guide',\n//   filePathPattern: `guides/**/*.mdx`,\n//   contentType: 'mdx',\n//   fields: {\n//     title: {\n//       type: 'string',\n//       required: true,\n//     },\n//     description: {\n//       type: 'string',\n//     },\n//     date: {\n//       type: 'date',\n//       required: true,\n//     },\n//     published: {\n//       type: 'boolean',\n//       default: true,\n//     },\n//     featured: {\n//       type: 'boolean',\n//       default: false,\n//     },\n//   },\n//   computedFields,\n// }))\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `**/blog/**/*.mdx`, // This line was changed\n  contentType: 'mdx',\n  fields: {\n    title: {\n      description: 'The title of the post',\n      type: 'string',\n      required: true,\n    },\n    description: {\n      description: 'The description of the post',\n      type: 'string',\n    },\n    metaTitle: {\n      description: 'The meta title',\n      type: 'string',\n    },\n    metaDescription: {\n      description: 'The meta description',\n      type: 'string',\n    },\n    keywords: {\n      description: 'Keywords for blogpost',\n      type: 'list',\n      of: { type: 'string' },\n    },\n    date: {\n      type: 'date',\n      required: true,\n    },\n    published: {\n      type: 'boolean',\n      default: true,\n    },\n    featured: {\n      type: 'boolean',\n      default: false,\n    },\n    image: {\n      type: 'string',\n      required: true,\n    },\n    authors: {\n      // Reference types are not embedded.\n      // Until this is fixed, we can use a simple list.\n      // type: \"reference\",\n      // of: Author,\n      type: 'list',\n      of: { type: 'string' },\n      required: true,\n    },\n    categories: {\n      type: 'list',\n      of: { type: 'string' },\n      required: true,\n    },\n  },\n  postAccess: {\n    type: 'enum',\n    of: ['public', 'membersOnly', 'paidMembersOnly', 'specificTiers'],\n    default: 'public',\n    required: true,\n  },\n  computedFields,\n}))\n\nexport const Author = defineDocumentType(() => ({\n  name: 'Author',\n  filePathPattern: `authors/**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      required: true,\n    },\n    description: {\n      type: 'string',\n    },\n    avatar: {\n      type: 'string',\n      required: true,\n    },\n    twitter: {\n      type: 'string',\n      required: true,\n    },\n  },\n  computedFields,\n}))\n\nexport default makeSource({\n  contentDirPath: './content',\n  documentTypes: [Post, Author, Page],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypePrettyCode,\n        {\n          theme: 'github-dark',\n          onVisitLine(node) {\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\n            // lines to be copy/pasted\n            if (node.children.length === 0) {\n              node.children = [{ type: 'text', value: ' ' }]\n            }\n          },\n          onVisitHighlightedLine(node) {\n            node.properties.className.push('line--highlighted')\n          },\n          onVisitHighlightedWord(node) {\n            node.properties.className = ['word--highlighted']\n          },\n        },\n      ],\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: ['subheading-anchor'],\n            ariaLabel: 'Link to section',\n          },\n        },\n      ],\n    ],\n  },\n})\n"],
  "mappings": "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",
  "names": []
}
