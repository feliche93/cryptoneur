/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/assets/{id}": {
    /** Image typed files can be dynamically resized and transformed to fit any need. */
    get: operations["getAsset"];
  };
  "/auth/login": {
    /** Retrieve a Temporary Access Token */
    post: operations["login"];
  };
  "/auth/refresh": {
    /** Refresh a Temporary Access Token. */
    post: operations["refresh"];
  };
  "/auth/logout": {
    /** Log Out */
    post: operations["logout"];
  };
  "/auth/password/request": {
    /** Request a reset password email to be send. */
    post: operations["passwordRequest"];
  };
  "/auth/password/reset": {
    /** The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password. */
    post: operations["passwordReset"];
  };
  "/auth/oauth": {
    /** List configured OAuth providers. */
    get: operations["oauth"];
  };
  "/auth/oauth/{provider}": {
    /** Start OAuth flow using the specified provider */
    get: operations["oauthProvider"];
  };
  "/extensions/interfaces": {
    /** List all installed custom interfaces. */
    get: operations["getInterfaces"];
  };
  "/extensions/layouts": {
    /** List all installed custom layouts. */
    get: operations["getLayouts"];
  };
  "/extensions/displays": {
    /** List all installed custom displays. */
    get: operations["getDisplays"];
  };
  "/extensions/modules": {
    /** List all installed custom modules. */
    get: operations["getModules"];
  };
  "/schema/snapshot": {
    /** Retrieve the current schema. This endpoint is only available to admin users. */
    get: operations["schemaSnapshot"];
  };
  "/schema/apply": {
    /** Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the request body. This endpoint is only available to admin users. */
    post: operations["schemaApply"];
  };
  "/schema/diff": {
    /** Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users. */
    post: operations["schemaDiff"];
  };
  "/server/info": {
    /** Perform a system status check and return the options. */
    get: operations["serverInfo"];
  };
  "/server/ping": {
    /** Ping, pong. Ping.. pong. */
    get: operations["ping"];
  };
  "/utils/hash/generate": {
    /** Generate a hash for a given string. */
    post: operations["hash-generate"];
  };
  "/utils/hash/verify": {
    /** Generate a hash for a given string. */
    post: operations["hash-verify"];
  };
  "/utils/sort/{collection}": {
    /** Re-sort items in collection based on start and to value of item */
    post: operations["sort"];
  };
  "/utils/import/{collection}": {
    /** Import multiple records from a JSON or CSV file into a collection. */
    post: operations["import"];
  };
  "/utils/export/{collection}": {
    /** Export a larger data set to a file in the File Library */
    post: operations["export"];
  };
  "/utils/cache/clear": {
    /** Resets both the data and schema cache of Directus. */
    post: operations["clear-cache"];
  };
  "/utils/random/string": {
    /** Returns a random string of given length. */
    get: operations["random"];
  };
  "/items/authors": {
    /** List the authors items. */
    get: operations["readItemsAuthors"];
    /** Create a new authors item. */
    post: operations["createItemsAuthors"];
  };
  "/items/authors/{id}": {
    /** Retrieve a single authors item by unique identifier. */
    get: operations["readSingleItemsAuthors"];
    /** Delete an existing authors item. */
    delete: operations["deleteSingleItemsAuthors"];
    /** Update an existing authors item. */
    patch: operations["updateSingleItemsAuthors"];
  };
  "/items/block_button": {
    /** List the block_button items. */
    get: operations["readItemsBlockButton"];
    /** Create a new block_button item. */
    post: operations["createItemsBlockButton"];
  };
  "/items/block_button/{id}": {
    /** Retrieve a single block_button item by unique identifier. */
    get: operations["readSingleItemsBlockButton"];
    /** Delete an existing block_button item. */
    delete: operations["deleteSingleItemsBlockButton"];
    /** Update an existing block_button item. */
    patch: operations["updateSingleItemsBlockButton"];
  };
  "/items/block_button_translations": {
    /** List the block_button_translations items. */
    get: operations["readItemsBlockButtonTranslations"];
    /** Create a new block_button_translations item. */
    post: operations["createItemsBlockButtonTranslations"];
  };
  "/items/block_button_translations/{id}": {
    /** Retrieve a single block_button_translations item by unique identifier. */
    get: operations["readSingleItemsBlockButtonTranslations"];
    /** Delete an existing block_button_translations item. */
    delete: operations["deleteSingleItemsBlockButtonTranslations"];
    /** Update an existing block_button_translations item. */
    patch: operations["updateSingleItemsBlockButtonTranslations"];
  };
  "/items/block_cal": {
    /** List the block_cal items. */
    get: operations["readItemsBlockCal"];
    /** Create a new block_cal item. */
    post: operations["createItemsBlockCal"];
  };
  "/items/block_cal/{id}": {
    /** Retrieve a single block_cal item by unique identifier. */
    get: operations["readSingleItemsBlockCal"];
    /** Delete an existing block_cal item. */
    delete: operations["deleteSingleItemsBlockCal"];
    /** Update an existing block_cal item. */
    patch: operations["updateSingleItemsBlockCal"];
  };
  "/items/block_cal_title": {
    /** List the block_cal_title items. */
    get: operations["readItemsBlockCalTitle"];
    /** Create a new block_cal_title item. */
    post: operations["createItemsBlockCalTitle"];
  };
  "/items/block_cal_title/{id}": {
    /** Retrieve a single block_cal_title item by unique identifier. */
    get: operations["readSingleItemsBlockCalTitle"];
    /** Delete an existing block_cal_title item. */
    delete: operations["deleteSingleItemsBlockCalTitle"];
    /** Update an existing block_cal_title item. */
    patch: operations["updateSingleItemsBlockCalTitle"];
  };
  "/items/block_external_link": {
    /** List the block_external_link items. */
    get: operations["readItemsBlockExternalLink"];
    /** Create a new block_external_link item. */
    post: operations["createItemsBlockExternalLink"];
  };
  "/items/block_external_link/{id}": {
    /** Retrieve a single block_external_link item by unique identifier. */
    get: operations["readSingleItemsBlockExternalLink"];
    /** Delete an existing block_external_link item. */
    delete: operations["deleteSingleItemsBlockExternalLink"];
    /** Update an existing block_external_link item. */
    patch: operations["updateSingleItemsBlockExternalLink"];
  };
  "/items/block_external_link_translations": {
    /** List the block_external_link_translations items. */
    get: operations["readItemsBlockExternalLinkTranslations"];
    /** Create a new block_external_link_translations item. */
    post: operations["createItemsBlockExternalLinkTranslations"];
  };
  "/items/block_external_link_translations/{id}": {
    /** Retrieve a single block_external_link_translations item by unique identifier. */
    get: operations["readSingleItemsBlockExternalLinkTranslations"];
    /** Delete an existing block_external_link_translations item. */
    delete: operations["deleteSingleItemsBlockExternalLinkTranslations"];
    /** Update an existing block_external_link_translations item. */
    patch: operations["updateSingleItemsBlockExternalLinkTranslations"];
  };
  "/items/block_features": {
    /** List the block_features items. */
    get: operations["readItemsBlockFeatures"];
    /** Create a new block_features item. */
    post: operations["createItemsBlockFeatures"];
  };
  "/items/block_features/{id}": {
    /** Retrieve a single block_features item by unique identifier. */
    get: operations["readSingleItemsBlockFeatures"];
    /** Delete an existing block_features item. */
    delete: operations["deleteSingleItemsBlockFeatures"];
    /** Update an existing block_features item. */
    patch: operations["updateSingleItemsBlockFeatures"];
  };
  "/items/block_features_translations": {
    /** List the block_features_translations items. */
    get: operations["readItemsBlockFeaturesTranslations"];
    /** Create a new block_features_translations item. */
    post: operations["createItemsBlockFeaturesTranslations"];
  };
  "/items/block_features_translations/{id}": {
    /** Retrieve a single block_features_translations item by unique identifier. */
    get: operations["readSingleItemsBlockFeaturesTranslations"];
    /** Delete an existing block_features_translations item. */
    delete: operations["deleteSingleItemsBlockFeaturesTranslations"];
    /** Update an existing block_features_translations item. */
    patch: operations["updateSingleItemsBlockFeaturesTranslations"];
  };
  "/items/block_hero": {
    /** List the block_hero items. */
    get: operations["readItemsBlockHero"];
    /** Create a new block_hero item. */
    post: operations["createItemsBlockHero"];
  };
  "/items/block_hero/{id}": {
    /** Retrieve a single block_hero item by unique identifier. */
    get: operations["readSingleItemsBlockHero"];
    /** Delete an existing block_hero item. */
    delete: operations["deleteSingleItemsBlockHero"];
    /** Update an existing block_hero item. */
    patch: operations["updateSingleItemsBlockHero"];
  };
  "/items/block_hero_buttons": {
    /** List the block_hero_buttons items. */
    get: operations["readItemsBlockHeroButtons"];
    /** Create a new block_hero_buttons item. */
    post: operations["createItemsBlockHeroButtons"];
  };
  "/items/block_hero_buttons/{id}": {
    /** Retrieve a single block_hero_buttons item by unique identifier. */
    get: operations["readSingleItemsBlockHeroButtons"];
    /** Delete an existing block_hero_buttons item. */
    delete: operations["deleteSingleItemsBlockHeroButtons"];
    /** Update an existing block_hero_buttons item. */
    patch: operations["updateSingleItemsBlockHeroButtons"];
  };
  "/items/block_hero_translations": {
    /** List the block_hero_translations items. */
    get: operations["readItemsBlockHeroTranslations"];
    /** Create a new block_hero_translations item. */
    post: operations["createItemsBlockHeroTranslations"];
  };
  "/items/block_hero_translations/{id}": {
    /** Retrieve a single block_hero_translations item by unique identifier. */
    get: operations["readSingleItemsBlockHeroTranslations"];
    /** Delete an existing block_hero_translations item. */
    delete: operations["deleteSingleItemsBlockHeroTranslations"];
    /** Update an existing block_hero_translations item. */
    patch: operations["updateSingleItemsBlockHeroTranslations"];
  };
  "/items/block_logo_cloud": {
    /** List the block_logo_cloud items. */
    get: operations["readItemsBlockLogoCloud"];
    /** Create a new block_logo_cloud item. */
    post: operations["createItemsBlockLogoCloud"];
  };
  "/items/block_logo_cloud/{id}": {
    /** Retrieve a single block_logo_cloud item by unique identifier. */
    get: operations["readSingleItemsBlockLogoCloud"];
    /** Delete an existing block_logo_cloud item. */
    delete: operations["deleteSingleItemsBlockLogoCloud"];
    /** Update an existing block_logo_cloud item. */
    patch: operations["updateSingleItemsBlockLogoCloud"];
  };
  "/items/block_logo_cloud_files": {
    /** List the block_logo_cloud_files items. */
    get: operations["readItemsBlockLogoCloudFiles"];
    /** Create a new block_logo_cloud_files item. */
    post: operations["createItemsBlockLogoCloudFiles"];
  };
  "/items/block_logo_cloud_files/{id}": {
    /** Retrieve a single block_logo_cloud_files item by unique identifier. */
    get: operations["readSingleItemsBlockLogoCloudFiles"];
    /** Delete an existing block_logo_cloud_files item. */
    delete: operations["deleteSingleItemsBlockLogoCloudFiles"];
    /** Update an existing block_logo_cloud_files item. */
    patch: operations["updateSingleItemsBlockLogoCloudFiles"];
  };
  "/items/block_logo_cloud_translations": {
    /** List the block_logo_cloud_translations items. */
    get: operations["readItemsBlockLogoCloudTranslations"];
    /** Create a new block_logo_cloud_translations item. */
    post: operations["createItemsBlockLogoCloudTranslations"];
  };
  "/items/block_logo_cloud_translations/{id}": {
    /** Retrieve a single block_logo_cloud_translations item by unique identifier. */
    get: operations["readSingleItemsBlockLogoCloudTranslations"];
    /** Delete an existing block_logo_cloud_translations item. */
    delete: operations["deleteSingleItemsBlockLogoCloudTranslations"];
    /** Update an existing block_logo_cloud_translations item. */
    patch: operations["updateSingleItemsBlockLogoCloudTranslations"];
  };
  "/items/block_page_link": {
    /** List the block_page_link items. */
    get: operations["readItemsBlockPageLink"];
    /** Create a new block_page_link item. */
    post: operations["createItemsBlockPageLink"];
  };
  "/items/block_page_link/{id}": {
    /** Retrieve a single block_page_link item by unique identifier. */
    get: operations["readSingleItemsBlockPageLink"];
    /** Delete an existing block_page_link item. */
    delete: operations["deleteSingleItemsBlockPageLink"];
    /** Update an existing block_page_link item. */
    patch: operations["updateSingleItemsBlockPageLink"];
  };
  "/items/block_title": {
    /** List the block_title items. */
    get: operations["readItemsBlockTitle"];
    /** Create a new block_title item. */
    post: operations["createItemsBlockTitle"];
  };
  "/items/block_title/{id}": {
    /** Retrieve a single block_title item by unique identifier. */
    get: operations["readSingleItemsBlockTitle"];
    /** Delete an existing block_title item. */
    delete: operations["deleteSingleItemsBlockTitle"];
    /** Update an existing block_title item. */
    patch: operations["updateSingleItemsBlockTitle"];
  };
  "/items/block_title_translations": {
    /** List the block_title_translations items. */
    get: operations["readItemsBlockTitleTranslations"];
    /** Create a new block_title_translations item. */
    post: operations["createItemsBlockTitleTranslations"];
  };
  "/items/block_title_translations/{id}": {
    /** Retrieve a single block_title_translations item by unique identifier. */
    get: operations["readSingleItemsBlockTitleTranslations"];
    /** Delete an existing block_title_translations item. */
    delete: operations["deleteSingleItemsBlockTitleTranslations"];
    /** Update an existing block_title_translations item. */
    patch: operations["updateSingleItemsBlockTitleTranslations"];
  };
  "/items/blockchains": {
    /** List the blockchains items. */
    get: operations["readItemsBlockchains"];
    /** Create a new blockchains item. */
    post: operations["createItemsBlockchains"];
  };
  "/items/blockchains/{id}": {
    /** Retrieve a single blockchains item by unique identifier. */
    get: operations["readSingleItemsBlockchains"];
    /** Delete an existing blockchains item. */
    delete: operations["deleteSingleItemsBlockchains"];
    /** Update an existing blockchains item. */
    patch: operations["updateSingleItemsBlockchains"];
  };
  "/items/blocks": {
    /** List the blocks items. */
    get: operations["readItemsBlocks"];
    /** Create a new blocks item. */
    post: operations["createItemsBlocks"];
  };
  "/items/blocks/{id}": {
    /** Retrieve a single blocks item by unique identifier. */
    get: operations["readSingleItemsBlocks"];
    /** Delete an existing blocks item. */
    delete: operations["deleteSingleItemsBlocks"];
    /** Update an existing blocks item. */
    patch: operations["updateSingleItemsBlocks"];
  };
  "/items/categories": {
    /** List the categories items. */
    get: operations["readItemsCategories"];
    /** Create a new categories item. */
    post: operations["createItemsCategories"];
  };
  "/items/categories/{id}": {
    /** Retrieve a single categories item by unique identifier. */
    get: operations["readSingleItemsCategories"];
    /** Delete an existing categories item. */
    delete: operations["deleteSingleItemsCategories"];
    /** Update an existing categories item. */
    patch: operations["updateSingleItemsCategories"];
  };
  "/items/currencies": {
    /** List the currencies items. */
    get: operations["readItemsCurrencies"];
    /** Create a new currencies item. */
    post: operations["createItemsCurrencies"];
  };
  "/items/currencies/{id}": {
    /** Retrieve a single currencies item by unique identifier. */
    get: operations["readSingleItemsCurrencies"];
    /** Delete an existing currencies item. */
    delete: operations["deleteSingleItemsCurrencies"];
    /** Update an existing currencies item. */
    patch: operations["updateSingleItemsCurrencies"];
  };
  "/items/fiats": {
    /** List the fiats items. */
    get: operations["readItemsFiats"];
    /** Create a new fiats item. */
    post: operations["createItemsFiats"];
  };
  "/items/fiats/{id}": {
    /** Retrieve a single fiats item by unique identifier. */
    get: operations["readSingleItemsFiats"];
    /** Delete an existing fiats item. */
    delete: operations["deleteSingleItemsFiats"];
    /** Update an existing fiats item. */
    patch: operations["updateSingleItemsFiats"];
  };
  "/items/followers": {
    /** List the followers items. */
    get: operations["readItemsFollowers"];
    /** Create a new followers item. */
    post: operations["createItemsFollowers"];
  };
  "/items/followers/{id}": {
    /** Retrieve a single followers item by unique identifier. */
    get: operations["readSingleItemsFollowers"];
    /** Delete an existing followers item. */
    delete: operations["deleteSingleItemsFollowers"];
    /** Update an existing followers item. */
    patch: operations["updateSingleItemsFollowers"];
  };
  "/items/grant_blockchains": {
    /** List the grant_blockchains items. */
    get: operations["readItemsGrantBlockchains"];
    /** Create a new grant_blockchains item. */
    post: operations["createItemsGrantBlockchains"];
  };
  "/items/grant_blockchains/{id}": {
    /** Retrieve a single grant_blockchains item by unique identifier. */
    get: operations["readSingleItemsGrantBlockchains"];
    /** Delete an existing grant_blockchains item. */
    delete: operations["deleteSingleItemsGrantBlockchains"];
    /** Update an existing grant_blockchains item. */
    patch: operations["updateSingleItemsGrantBlockchains"];
  };
  "/items/grant_categories": {
    /** List the grant_categories items. */
    get: operations["readItemsGrantCategories"];
    /** Create a new grant_categories item. */
    post: operations["createItemsGrantCategories"];
  };
  "/items/grant_categories/{id}": {
    /** Retrieve a single grant_categories item by unique identifier. */
    get: operations["readSingleItemsGrantCategories"];
    /** Delete an existing grant_categories item. */
    delete: operations["deleteSingleItemsGrantCategories"];
    /** Update an existing grant_categories item. */
    patch: operations["updateSingleItemsGrantCategories"];
  };
  "/items/grants": {
    /** List the grants items. */
    get: operations["readItemsGrants"];
    /** Create a new grants item. */
    post: operations["createItemsGrants"];
  };
  "/items/grants/{id}": {
    /** Retrieve a single grants item by unique identifier. */
    get: operations["readSingleItemsGrants"];
    /** Delete an existing grants item. */
    delete: operations["deleteSingleItemsGrants"];
    /** Update an existing grants item. */
    patch: operations["updateSingleItemsGrants"];
  };
  "/items/languages": {
    /** List the languages items. */
    get: operations["readItemsLanguages"];
    /** Create a new languages item. */
    post: operations["createItemsLanguages"];
  };
  "/items/languages/{id}": {
    /** Retrieve a single languages item by unique identifier. */
    get: operations["readSingleItemsLanguages"];
    /** Delete an existing languages item. */
    delete: operations["deleteSingleItemsLanguages"];
    /** Update an existing languages item. */
    patch: operations["updateSingleItemsLanguages"];
  };
  "/items/pages": {
    /** List the pages items. */
    get: operations["readItemsPages"];
    /** Create a new pages item. */
    post: operations["createItemsPages"];
  };
  "/items/pages/{id}": {
    /** Retrieve a single pages item by unique identifier. */
    get: operations["readSingleItemsPages"];
    /** Delete an existing pages item. */
    delete: operations["deleteSingleItemsPages"];
    /** Update an existing pages item. */
    patch: operations["updateSingleItemsPages"];
  };
  "/items/pages_content": {
    /** List the pages_content items. */
    get: operations["readItemsPagesContent"];
    /** Create a new pages_content item. */
    post: operations["createItemsPagesContent"];
  };
  "/items/pages_content/{id}": {
    /** Retrieve a single pages_content item by unique identifier. */
    get: operations["readSingleItemsPagesContent"];
    /** Delete an existing pages_content item. */
    delete: operations["deleteSingleItemsPagesContent"];
    /** Update an existing pages_content item. */
    patch: operations["updateSingleItemsPagesContent"];
  };
  "/items/pages_translations": {
    /** List the pages_translations items. */
    get: operations["readItemsPagesTranslations"];
    /** Create a new pages_translations item. */
    post: operations["createItemsPagesTranslations"];
  };
  "/items/pages_translations/{id}": {
    /** Retrieve a single pages_translations item by unique identifier. */
    get: operations["readSingleItemsPagesTranslations"];
    /** Delete an existing pages_translations item. */
    delete: operations["deleteSingleItemsPagesTranslations"];
    /** Update an existing pages_translations item. */
    patch: operations["updateSingleItemsPagesTranslations"];
  };
  "/items/web3": {
    /** List the web3 items. */
    get: operations["readItemsWeb3"];
    /** Create a new web3 item. */
    post: operations["createItemsWeb3"];
  };
  "/items/web3/{id}": {
    /** Retrieve a single web3 item by unique identifier. */
    get: operations["readSingleItemsWeb3"];
    /** Delete an existing web3 item. */
    delete: operations["deleteSingleItemsWeb3"];
    /** Update an existing web3 item. */
    patch: operations["updateSingleItemsWeb3"];
  };
  "/items/web3_blockchains": {
    /** List the web3_blockchains items. */
    get: operations["readItemsWeb3Blockchains"];
    /** Create a new web3_blockchains item. */
    post: operations["createItemsWeb3Blockchains"];
  };
  "/items/web3_blockchains/{id}": {
    /** Retrieve a single web3_blockchains item by unique identifier. */
    get: operations["readSingleItemsWeb3Blockchains"];
    /** Delete an existing web3_blockchains item. */
    delete: operations["deleteSingleItemsWeb3Blockchains"];
    /** Update an existing web3_blockchains item. */
    patch: operations["updateSingleItemsWeb3Blockchains"];
  };
  "/items/web3_categories": {
    /** List the web3_categories items. */
    get: operations["readItemsWeb3Categories"];
    /** Create a new web3_categories item. */
    post: operations["createItemsWeb3Categories"];
  };
  "/items/web3_categories/{id}": {
    /** Retrieve a single web3_categories item by unique identifier. */
    get: operations["readSingleItemsWeb3Categories"];
    /** Delete an existing web3_categories item. */
    delete: operations["deleteSingleItemsWeb3Categories"];
    /** Update an existing web3_categories item. */
    patch: operations["updateSingleItemsWeb3Categories"];
  };
  "/items/web3_categories_translations": {
    /** List the web3_categories_translations items. */
    get: operations["readItemsWeb3CategoriesTranslations"];
    /** Create a new web3_categories_translations item. */
    post: operations["createItemsWeb3CategoriesTranslations"];
  };
  "/items/web3_categories_translations/{id}": {
    /** Retrieve a single web3_categories_translations item by unique identifier. */
    get: operations["readSingleItemsWeb3CategoriesTranslations"];
    /** Delete an existing web3_categories_translations item. */
    delete: operations["deleteSingleItemsWeb3CategoriesTranslations"];
    /** Update an existing web3_categories_translations item. */
    patch: operations["updateSingleItemsWeb3CategoriesTranslations"];
  };
  "/items/web3_grants": {
    /** List the web3_grants items. */
    get: operations["readItemsWeb3Grants"];
    /** Create a new web3_grants item. */
    post: operations["createItemsWeb3Grants"];
  };
  "/items/web3_grants/{id}": {
    /** Retrieve a single web3_grants item by unique identifier. */
    get: operations["readSingleItemsWeb3Grants"];
    /** Delete an existing web3_grants item. */
    delete: operations["deleteSingleItemsWeb3Grants"];
    /** Update an existing web3_grants item. */
    patch: operations["updateSingleItemsWeb3Grants"];
  };
  "/items/web3_grants_translations": {
    /** List the web3_grants_translations items. */
    get: operations["readItemsWeb3GrantsTranslations"];
    /** Create a new web3_grants_translations item. */
    post: operations["createItemsWeb3GrantsTranslations"];
  };
  "/items/web3_grants_translations/{id}": {
    /** Retrieve a single web3_grants_translations item by unique identifier. */
    get: operations["readSingleItemsWeb3GrantsTranslations"];
    /** Delete an existing web3_grants_translations item. */
    delete: operations["deleteSingleItemsWeb3GrantsTranslations"];
    /** Update an existing web3_grants_translations item. */
    patch: operations["updateSingleItemsWeb3GrantsTranslations"];
  };
  "/items/web3_grants_web3_blockchains": {
    /** List the web3_grants_web3_blockchains items. */
    get: operations["readItemsWeb3GrantsWeb3Blockchains"];
    /** Create a new web3_grants_web3_blockchains item. */
    post: operations["createItemsWeb3GrantsWeb3Blockchains"];
  };
  "/items/web3_grants_web3_blockchains/{id}": {
    /** Retrieve a single web3_grants_web3_blockchains item by unique identifier. */
    get: operations["readSingleItemsWeb3GrantsWeb3Blockchains"];
    /** Delete an existing web3_grants_web3_blockchains item. */
    delete: operations["deleteSingleItemsWeb3GrantsWeb3Blockchains"];
    /** Update an existing web3_grants_web3_blockchains item. */
    patch: operations["updateSingleItemsWeb3GrantsWeb3Blockchains"];
  };
  "/items/web3_grants_web3_categories": {
    /** List the web3_grants_web3_categories items. */
    get: operations["readItemsWeb3GrantsWeb3Categories"];
    /** Create a new web3_grants_web3_categories item. */
    post: operations["createItemsWeb3GrantsWeb3Categories"];
  };
  "/items/web3_grants_web3_categories/{id}": {
    /** Retrieve a single web3_grants_web3_categories item by unique identifier. */
    get: operations["readSingleItemsWeb3GrantsWeb3Categories"];
    /** Delete an existing web3_grants_web3_categories item. */
    delete: operations["deleteSingleItemsWeb3GrantsWeb3Categories"];
    /** Update an existing web3_grants_web3_categories item. */
    patch: operations["updateSingleItemsWeb3GrantsWeb3Categories"];
  };
  "/items/web3_grants_web3_rfps": {
    /** List the web3_grants_web3_rfps items. */
    get: operations["readItemsWeb3GrantsWeb3Rfps"];
    /** Create a new web3_grants_web3_rfps item. */
    post: operations["createItemsWeb3GrantsWeb3Rfps"];
  };
  "/items/web3_grants_web3_rfps/{id}": {
    /** Retrieve a single web3_grants_web3_rfps item by unique identifier. */
    get: operations["readSingleItemsWeb3GrantsWeb3Rfps"];
    /** Delete an existing web3_grants_web3_rfps item. */
    delete: operations["deleteSingleItemsWeb3GrantsWeb3Rfps"];
    /** Update an existing web3_grants_web3_rfps item. */
    patch: operations["updateSingleItemsWeb3GrantsWeb3Rfps"];
  };
  "/items/web3_grants_web3_use_cases": {
    /** List the web3_grants_web3_use_cases items. */
    get: operations["readItemsWeb3GrantsWeb3UseCases"];
    /** Create a new web3_grants_web3_use_cases item. */
    post: operations["createItemsWeb3GrantsWeb3UseCases"];
  };
  "/items/web3_grants_web3_use_cases/{id}": {
    /** Retrieve a single web3_grants_web3_use_cases item by unique identifier. */
    get: operations["readSingleItemsWeb3GrantsWeb3UseCases"];
    /** Delete an existing web3_grants_web3_use_cases item. */
    delete: operations["deleteSingleItemsWeb3GrantsWeb3UseCases"];
    /** Update an existing web3_grants_web3_use_cases item. */
    patch: operations["updateSingleItemsWeb3GrantsWeb3UseCases"];
  };
  "/items/web3_rfp_priorities": {
    /** List the web3_rfp_priorities items. */
    get: operations["readItemsWeb3RfpPriorities"];
    /** Create a new web3_rfp_priorities item. */
    post: operations["createItemsWeb3RfpPriorities"];
  };
  "/items/web3_rfp_priorities/{id}": {
    /** Retrieve a single web3_rfp_priorities item by unique identifier. */
    get: operations["readSingleItemsWeb3RfpPriorities"];
    /** Delete an existing web3_rfp_priorities item. */
    delete: operations["deleteSingleItemsWeb3RfpPriorities"];
    /** Update an existing web3_rfp_priorities item. */
    patch: operations["updateSingleItemsWeb3RfpPriorities"];
  };
  "/items/web3_rfp_priorities_translations": {
    /** List the web3_rfp_priorities_translations items. */
    get: operations["readItemsWeb3RfpPrioritiesTranslations"];
    /** Create a new web3_rfp_priorities_translations item. */
    post: operations["createItemsWeb3RfpPrioritiesTranslations"];
  };
  "/items/web3_rfp_priorities_translations/{id}": {
    /** Retrieve a single web3_rfp_priorities_translations item by unique identifier. */
    get: operations["readSingleItemsWeb3RfpPrioritiesTranslations"];
    /** Delete an existing web3_rfp_priorities_translations item. */
    delete: operations["deleteSingleItemsWeb3RfpPrioritiesTranslations"];
    /** Update an existing web3_rfp_priorities_translations item. */
    patch: operations["updateSingleItemsWeb3RfpPrioritiesTranslations"];
  };
  "/items/web3_rfp_statuses": {
    /** List the web3_rfp_statuses items. */
    get: operations["readItemsWeb3RfpStatuses"];
    /** Create a new web3_rfp_statuses item. */
    post: operations["createItemsWeb3RfpStatuses"];
  };
  "/items/web3_rfp_statuses/{id}": {
    /** Retrieve a single web3_rfp_statuses item by unique identifier. */
    get: operations["readSingleItemsWeb3RfpStatuses"];
    /** Delete an existing web3_rfp_statuses item. */
    delete: operations["deleteSingleItemsWeb3RfpStatuses"];
    /** Update an existing web3_rfp_statuses item. */
    patch: operations["updateSingleItemsWeb3RfpStatuses"];
  };
  "/items/web3_rfp_statuses_translations": {
    /** List the web3_rfp_statuses_translations items. */
    get: operations["readItemsWeb3RfpStatusesTranslations"];
    /** Create a new web3_rfp_statuses_translations item. */
    post: operations["createItemsWeb3RfpStatusesTranslations"];
  };
  "/items/web3_rfp_statuses_translations/{id}": {
    /** Retrieve a single web3_rfp_statuses_translations item by unique identifier. */
    get: operations["readSingleItemsWeb3RfpStatusesTranslations"];
    /** Delete an existing web3_rfp_statuses_translations item. */
    delete: operations["deleteSingleItemsWeb3RfpStatusesTranslations"];
    /** Update an existing web3_rfp_statuses_translations item. */
    patch: operations["updateSingleItemsWeb3RfpStatusesTranslations"];
  };
  "/items/web3_rfps": {
    /** List the web3_rfps items. */
    get: operations["readItemsWeb3Rfps"];
    /** Create a new web3_rfps item. */
    post: operations["createItemsWeb3Rfps"];
  };
  "/items/web3_rfps/{id}": {
    /** Retrieve a single web3_rfps item by unique identifier. */
    get: operations["readSingleItemsWeb3Rfps"];
    /** Delete an existing web3_rfps item. */
    delete: operations["deleteSingleItemsWeb3Rfps"];
    /** Update an existing web3_rfps item. */
    patch: operations["updateSingleItemsWeb3Rfps"];
  };
  "/items/web3_rfps_translations": {
    /** List the web3_rfps_translations items. */
    get: operations["readItemsWeb3RfpsTranslations"];
    /** Create a new web3_rfps_translations item. */
    post: operations["createItemsWeb3RfpsTranslations"];
  };
  "/items/web3_rfps_translations/{id}": {
    /** Retrieve a single web3_rfps_translations item by unique identifier. */
    get: operations["readSingleItemsWeb3RfpsTranslations"];
    /** Delete an existing web3_rfps_translations item. */
    delete: operations["deleteSingleItemsWeb3RfpsTranslations"];
    /** Update an existing web3_rfps_translations item. */
    patch: operations["updateSingleItemsWeb3RfpsTranslations"];
  };
  "/items/web3_use_cases": {
    /** List the web3_use_cases items. */
    get: operations["readItemsWeb3UseCases"];
    /** Create a new web3_use_cases item. */
    post: operations["createItemsWeb3UseCases"];
  };
  "/items/web3_use_cases/{id}": {
    /** Retrieve a single web3_use_cases item by unique identifier. */
    get: operations["readSingleItemsWeb3UseCases"];
    /** Delete an existing web3_use_cases item. */
    delete: operations["deleteSingleItemsWeb3UseCases"];
    /** Update an existing web3_use_cases item. */
    patch: operations["updateSingleItemsWeb3UseCases"];
  };
  "/items/web3_use_cases_translations": {
    /** List the web3_use_cases_translations items. */
    get: operations["readItemsWeb3UseCasesTranslations"];
    /** Create a new web3_use_cases_translations item. */
    post: operations["createItemsWeb3UseCasesTranslations"];
  };
  "/items/web3_use_cases_translations/{id}": {
    /** Retrieve a single web3_use_cases_translations item by unique identifier. */
    get: operations["readSingleItemsWeb3UseCasesTranslations"];
    /** Delete an existing web3_use_cases_translations item. */
    delete: operations["deleteSingleItemsWeb3UseCasesTranslations"];
    /** Update an existing web3_use_cases_translations item. */
    patch: operations["updateSingleItemsWeb3UseCasesTranslations"];
  };
  "/activity": {
    /** Returns a list of activity actions. */
    get: operations["getActivities"];
  };
  "/activity/comment": {
    /** Creates a new comment. */
    post: operations["createComment"];
  };
  "/activity/{id}": {
    /** Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information. */
    get: operations["getActivity"];
  };
  "/activity/comment/{id}": {
    /** Delete an existing comment. Deleted comments can not be retrieved. */
    delete: operations["deleteComment"];
    /** Update the content of an existing comment. */
    patch: operations["updateComment"];
  };
  "/collections": {
    /** Returns a list of the collections available in the project. */
    get: operations["getCollections"];
    /** Create a new collection in Directus. */
    post: operations["createCollection"];
  };
  "/collections/{id}": {
    /** Retrieves the details of a single collection. */
    get: operations["getCollection"];
    /** Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution. */
    delete: operations["deleteCollection"];
    /** Update an existing collection. */
    patch: operations["updateCollection"];
  };
  "/fields": {
    /** Returns a list of the fields available in the project. */
    get: operations["getFields"];
  };
  "/fields/{collection}": {
    /** Returns a list of the fields available in the given collection. */
    get: operations["getCollectionFields"];
    /** Create a new field in a given collection. */
    post: operations["createField"];
  };
  "/fields/{collection}/{id}": {
    /** Retrieves the details of a single field in a given collection. */
    get: operations["getCollectionField"];
    /** Delete an existing field. */
    delete: operations["deleteField"];
    /** Update an existing field. */
    patch: operations["updateField"];
  };
  "/files": {
    /** List the files. */
    get: operations["getFiles"];
    /** Create a new file */
    post: operations["createFile"];
  };
  "/files/{id}": {
    /** Retrieve a single file by unique identifier. */
    get: operations["getFile"];
    /** Delete an existing file. */
    delete: operations["deleteFile"];
    /** Update an existing file, and/or replace it's file contents. */
    patch: operations["updateFile"];
  };
  "/folders": {
    /** List the folders. */
    get: operations["getFolders"];
    /** Create a new folder. */
    post: operations["createFolder"];
  };
  "/folders/{id}": {
    /** Retrieve a single folder by unique identifier. */
    get: operations["getFolder"];
    /** Delete an existing folder */
    delete: operations["deleteFolder"];
    /** Update an existing folder */
    patch: operations["updateFolder"];
  };
  "/permissions": {
    /** List all permissions. */
    get: operations["getPermissions"];
    /** Create a new permission. */
    post: operations["createPermission"];
  };
  "/permissions/me": {
    /** List the permissions that apply to the current user. */
    get: operations["getMyPermissions"];
  };
  "/permissions/{id}": {
    /** Retrieve a single permissions object by unique identifier. */
    get: operations["getPermission"];
    /** Delete an existing permission */
    delete: operations["deletePermission"];
    /** Update an existing permission */
    patch: operations["updatePermission"];
  };
  "/presets": {
    /** List the presets. */
    get: operations["getPresets"];
    /** Create a new preset. */
    post: operations["createPreset"];
  };
  "/presets/{id}": {
    /** Retrieve a single preset by unique identifier. */
    get: operations["getPreset"];
    /** Delete an existing preset. */
    delete: operations["deletePreset"];
    /** Update an existing preset. */
    patch: operations["updatePreset"];
  };
  "/relations": {
    /** List the relations. */
    get: operations["getRelations"];
    /** Create a new relation. */
    post: operations["createRelation"];
  };
  "/relations/{id}": {
    /** Retrieve a single relation by unique identifier. */
    get: operations["getRelation"];
    /** Delete an existing relation. */
    delete: operations["deleteRelation"];
    /** Update an existing relation */
    patch: operations["updateRelation"];
  };
  "/revisions": {
    /** List the revisions. */
    get: operations["getRevisions"];
  };
  "/revisions/{id}": {
    /** Retrieve a single revision by unique identifier. */
    get: operations["getRevision"];
  };
  "/roles": {
    /** List the roles. */
    get: operations["getRoles"];
    /** Create a new role. */
    post: operations["createRole"];
  };
  "/roles/{id}": {
    /** Retrieve a single role by unique identifier. */
    get: operations["getRole"];
    /** Delete an existing role */
    delete: operations["deleteRole"];
    /** Update an existing role */
    patch: operations["updateRole"];
  };
  "/settings": {
    /** List the settings. */
    get: operations["getSettings"];
    /** Update the settings */
    patch: operations["updateSetting"];
  };
  "/users": {
    /** List the users. */
    get: operations["getUsers"];
    /** Create a new user. */
    post: operations["createUser"];
  };
  "/users/{id}": {
    /** Retrieve a single user by unique identifier. */
    get: operations["getUser"];
    /** Delete an existing user */
    delete: operations["deleteUser"];
    /** Update an existing user */
    patch: operations["updateUser"];
  };
  "/users/invite": {
    /** Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account. */
    post: operations["invite"];
  };
  "/users/invite/accept": {
    /** Accepts and enables an invited user using a JWT invitation token. */
    post: operations["acceptInvite"];
  };
  "/users/me": {
    /** Retrieve the currently authenticated user. */
    get: operations["getMe"];
    /** Update the currently authenticated user. */
    patch: operations["updateMe"];
  };
  "/users/me/track/page": {
    /** Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used. */
    patch: operations["updateLastUsedPageMe"];
  };
  "/users/me/tfa/enable": {
    /** Enables two-factor authentication for the currently authenticated user. */
    post: operations["meTfaEnable"];
  };
  "/users/me/tfa/disable": {
    /** Disables two-factor authentication for the currently authenticated user. */
    post: operations["meTfaDisable"];
  };
  "/webhooks": {
    /** Get all webhooks. */
    get: operations["getWebhooks"];
    /** Create a new webhook. */
    post: operations["createWebhook"];
  };
  "/webhooks/{id}": {
    /** Retrieve a single webhook by unique identifier. */
    get: operations["getWebhook"];
    /** Delete an existing webhook */
    delete: operations["deleteWebhook"];
    /** Update an existing webhook */
    patch: operations["updateWebhook"];
  };
  "/flows": {
    /** Get all flows. */
    get: operations["getFlows"];
    /** Create a new flow. */
    post: operations["createFlow"];
  };
  "/flows/{id}": {
    /** Retrieve a single flow by unique identifier. */
    get: operations["getFlow"];
    /** Delete an existing flow */
    delete: operations["deleteFlow"];
    /** Update an existing flow */
    patch: operations["updateFlow"];
  };
  "/operations": {
    /** Get all operations. */
    get: operations["getOperations"];
    /** Create a new operation. */
    post: operations["createOperation"];
  };
  "/operations/{id}": {
    /** Retrieve a single operation by unique identifier. */
    get: operations["getOperation"];
    /** Delete an existing operation */
    delete: operations["deleteOperation"];
    /** Update an existing operation */
    patch: operations["updateOperation"];
  };
  "/items/grant_project_payments": {
    /** List the grant_project_payments items. */
    get: operations["readItemsGrantProjectPayments"];
    /** Create a new grant_project_payments item. */
    post: operations["createItemsGrantProjectPayments"];
  };
  "/items/grant_project_payments/{id}": {
    /** Retrieve a single grant_project_payments item by unique identifier. */
    get: operations["readSingleItemsGrantProjectPayments"];
    /** Delete an existing grant_project_payments item. */
    delete: operations["deleteSingleItemsGrantProjectPayments"];
    /** Update an existing grant_project_payments item. */
    patch: operations["updateSingleItemsGrantProjectPayments"];
  };
  "/items/grant_projects": {
    /** List the grant_projects items. */
    get: operations["readItemsGrantProjects"];
    /** Create a new grant_projects item. */
    post: operations["createItemsGrantProjects"];
  };
  "/items/grant_projects/{id}": {
    /** Retrieve a single grant_projects item by unique identifier. */
    get: operations["readSingleItemsGrantProjects"];
    /** Delete an existing grant_projects item. */
    delete: operations["deleteSingleItemsGrantProjects"];
    /** Update an existing grant_projects item. */
    patch: operations["updateSingleItemsGrantProjects"];
  };
  "/items/grant_rfps": {
    /** List the grant_rfps items. */
    get: operations["readItemsGrantRfps"];
    /** Create a new grant_rfps item. */
    post: operations["createItemsGrantRfps"];
  };
  "/items/grant_rfps/{id}": {
    /** Retrieve a single grant_rfps item by unique identifier. */
    get: operations["readSingleItemsGrantRfps"];
    /** Delete an existing grant_rfps item. */
    delete: operations["deleteSingleItemsGrantRfps"];
    /** Update an existing grant_rfps item. */
    patch: operations["updateSingleItemsGrantRfps"];
  };
  "/items/grant_use_cases": {
    /** List the grant_use_cases items. */
    get: operations["readItemsGrantUseCases"];
    /** Create a new grant_use_cases item. */
    post: operations["createItemsGrantUseCases"];
  };
  "/items/grant_use_cases/{id}": {
    /** Retrieve a single grant_use_cases item by unique identifier. */
    get: operations["readSingleItemsGrantUseCases"];
    /** Delete an existing grant_use_cases item. */
    delete: operations["deleteSingleItemsGrantUseCases"];
    /** Update an existing grant_use_cases item. */
    patch: operations["updateSingleItemsGrantUseCases"];
  };
  "/items/nc_evolutions": {
    /** List the nc_evolutions items. */
    get: operations["readItemsNcEvolutions"];
    /** Create a new nc_evolutions item. */
    post: operations["createItemsNcEvolutions"];
  };
  "/items/nc_evolutions/{id}": {
    /** Retrieve a single nc_evolutions item by unique identifier. */
    get: operations["readSingleItemsNcEvolutions"];
    /** Delete an existing nc_evolutions item. */
    delete: operations["deleteSingleItemsNcEvolutions"];
    /** Update an existing nc_evolutions item. */
    patch: operations["updateSingleItemsNcEvolutions"];
  };
  "/items/posts": {
    /** List the posts items. */
    get: operations["readItemsPosts"];
    /** Create a new posts item. */
    post: operations["createItemsPosts"];
  };
  "/items/posts/{id}": {
    /** Retrieve a single posts item by unique identifier. */
    get: operations["readSingleItemsPosts"];
    /** Delete an existing posts item. */
    delete: operations["deleteSingleItemsPosts"];
    /** Update an existing posts item. */
    patch: operations["updateSingleItemsPosts"];
  };
  "/items/project_use_cases": {
    /** List the project_use_cases items. */
    get: operations["readItemsProjectUseCases"];
    /** Create a new project_use_cases item. */
    post: operations["createItemsProjectUseCases"];
  };
  "/items/project_use_cases/{id}": {
    /** Retrieve a single project_use_cases item by unique identifier. */
    get: operations["readSingleItemsProjectUseCases"];
    /** Delete an existing project_use_cases item. */
    delete: operations["deleteSingleItemsProjectUseCases"];
    /** Update an existing project_use_cases item. */
    patch: operations["updateSingleItemsProjectUseCases"];
  };
  "/items/projects": {
    /** List the projects items. */
    get: operations["readItemsProjects"];
    /** Create a new projects item. */
    post: operations["createItemsProjects"];
  };
  "/items/projects/{id}": {
    /** Retrieve a single projects item by unique identifier. */
    get: operations["readSingleItemsProjects"];
    /** Delete an existing projects item. */
    delete: operations["deleteSingleItemsProjects"];
    /** Update an existing projects item. */
    patch: operations["updateSingleItemsProjects"];
  };
  "/items/providers": {
    /** List the providers items. */
    get: operations["readItemsProviders"];
    /** Create a new providers item. */
    post: operations["createItemsProviders"];
  };
  "/items/providers/{id}": {
    /** Retrieve a single providers item by unique identifier. */
    get: operations["readSingleItemsProviders"];
    /** Delete an existing providers item. */
    delete: operations["deleteSingleItemsProviders"];
    /** Update an existing providers item. */
    patch: operations["updateSingleItemsProviders"];
  };
  "/items/queries": {
    /** List the queries items. */
    get: operations["readItemsQueries"];
    /** Create a new queries item. */
    post: operations["createItemsQueries"];
  };
  "/items/queries/{id}": {
    /** Retrieve a single queries item by unique identifier. */
    get: operations["readSingleItemsQueries"];
    /** Delete an existing queries item. */
    delete: operations["deleteSingleItemsQueries"];
    /** Update an existing queries item. */
    patch: operations["updateSingleItemsQueries"];
  };
  "/items/replies": {
    /** List the replies items. */
    get: operations["readItemsReplies"];
    /** Create a new replies item. */
    post: operations["createItemsReplies"];
  };
  "/items/replies/{id}": {
    /** Retrieve a single replies item by unique identifier. */
    get: operations["readSingleItemsReplies"];
    /** Delete an existing replies item. */
    delete: operations["deleteSingleItemsReplies"];
    /** Update an existing replies item. */
    patch: operations["updateSingleItemsReplies"];
  };
  "/items/rfp_priorities": {
    /** List the rfp_priorities items. */
    get: operations["readItemsRfpPriorities"];
    /** Create a new rfp_priorities item. */
    post: operations["createItemsRfpPriorities"];
  };
  "/items/rfp_priorities/{id}": {
    /** Retrieve a single rfp_priorities item by unique identifier. */
    get: operations["readSingleItemsRfpPriorities"];
    /** Delete an existing rfp_priorities item. */
    delete: operations["deleteSingleItemsRfpPriorities"];
    /** Update an existing rfp_priorities item. */
    patch: operations["updateSingleItemsRfpPriorities"];
  };
  "/items/rfp_statuses": {
    /** List the rfp_statuses items. */
    get: operations["readItemsRfpStatuses"];
    /** Create a new rfp_statuses item. */
    post: operations["createItemsRfpStatuses"];
  };
  "/items/rfp_statuses/{id}": {
    /** Retrieve a single rfp_statuses item by unique identifier. */
    get: operations["readSingleItemsRfpStatuses"];
    /** Delete an existing rfp_statuses item. */
    delete: operations["deleteSingleItemsRfpStatuses"];
    /** Update an existing rfp_statuses item. */
    patch: operations["updateSingleItemsRfpStatuses"];
  };
  "/items/rfp_use_cases": {
    /** List the rfp_use_cases items. */
    get: operations["readItemsRfpUseCases"];
    /** Create a new rfp_use_cases item. */
    post: operations["createItemsRfpUseCases"];
  };
  "/items/rfp_use_cases/{id}": {
    /** Retrieve a single rfp_use_cases item by unique identifier. */
    get: operations["readSingleItemsRfpUseCases"];
    /** Delete an existing rfp_use_cases item. */
    delete: operations["deleteSingleItemsRfpUseCases"];
    /** Update an existing rfp_use_cases item. */
    patch: operations["updateSingleItemsRfpUseCases"];
  };
  "/items/rfps": {
    /** List the rfps items. */
    get: operations["readItemsRfps"];
    /** Create a new rfps item. */
    post: operations["createItemsRfps"];
  };
  "/items/rfps/{id}": {
    /** Retrieve a single rfps item by unique identifier. */
    get: operations["readSingleItemsRfps"];
    /** Delete an existing rfps item. */
    delete: operations["deleteSingleItemsRfps"];
    /** Update an existing rfps item. */
    patch: operations["updateSingleItemsRfps"];
  };
  "/items/use_cases": {
    /** List the use_cases items. */
    get: operations["readItemsUseCases"];
    /** Create a new use_cases item. */
    post: operations["createItemsUseCases"];
  };
  "/items/use_cases/{id}": {
    /** Retrieve a single use_cases item by unique identifier. */
    get: operations["readSingleItemsUseCases"];
    /** Delete an existing use_cases item. */
    delete: operations["deleteSingleItemsUseCases"];
    /** Update an existing use_cases item. */
    patch: operations["updateSingleItemsUseCases"];
  };
}

export interface components {
  schemas: {
    Query: {
      /** Control what fields are being returned in the object. */
      fields?: string[];
      filter?: { [key: string]: any };
      /** Filter by items that contain the given search query in one of their fields. */
      search?: string;
      /** How to sort the returned items. */
      sort?: string[];
      /** Set the maximum number of items that will be returned */
      limit?: number;
      /** How many items to skip when fetching data. */
      offset?: number;
      /** Cursor for use in pagination. Often used in combination with limit. */
      page?: number;
      /** Deep allows you to set any of the other query parameters on a nested relational dataset. */
      deep?: { [key: string]: any };
    };
    "x-metadata": {
      /** Returns the total item count of the collection you're querying. */
      total_count?: number;
      /** Returns the item count of the collection you're querying, taking the current filter/search parameters into account. */
      filter_count?: number;
    };
    ItemsAuthors: {
      id?: string;
      created_at?: string | null;
      username?: string;
      is_following?: boolean | null;
      provider_id?: number | components["schemas"]["ItemsProviders"];
    };
    ItemsBlockButton: {
      id?: number;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      variant?: string | null;
      size?: string | null;
      shape?: string | null;
      translations?: (
        | number
        | components["schemas"]["ItemsBlockButtonTranslations"]
      )[];
    };
    ItemsBlockButtonTranslations: {
      id?: number;
      block_button_id?:
        | (number | components["schemas"]["ItemsBlockButton"])
        | null;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      label?: string | null;
    };
    ItemsBlockCal: {
      id?: number;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      url?: string | null;
      title?: (number | components["schemas"]["ItemsBlockCalTitle"])[];
    };
    ItemsBlockCalTitle: {
      id?: number;
      block_cal_id?: (number | components["schemas"]["ItemsBlockCal"]) | null;
      item?: (string | { [key: string]: any })[] | null;
      collection?: string | null;
    };
    ItemsBlockExternalLink: {
      id?: number;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      href?: string | null;
      target?: string | null;
      rel?: { [key: string]: any } | null;
      translations?: (
        | number
        | components["schemas"]["ItemsBlockExternalLinkTranslations"]
      )[];
    };
    ItemsBlockExternalLinkTranslations: {
      id?: number;
      block_external_link_id?:
        | (number | components["schemas"]["ItemsBlockExternalLink"])
        | null;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      label?: string | null;
    };
    ItemsBlockFeatures: {
      id?: number;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      translations?: (
        | number
        | components["schemas"]["ItemsBlockFeaturesTranslations"]
      )[];
    };
    ItemsBlockFeaturesTranslations: {
      id?: number;
      block_features_id?:
        | (number | components["schemas"]["ItemsBlockFeatures"])
        | null;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      title?: string | null;
      features?: { [key: string]: any } | null;
      section?: string | null;
    };
    ItemsBlockHero: {
      id?: number;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      image?: (string | components["schemas"]["Files"]) | null;
      buttons?: (number | components["schemas"]["ItemsBlockHeroButtons"])[];
      translations?: (
        | number
        | components["schemas"]["ItemsBlockHeroTranslations"]
      )[];
    };
    ItemsBlockHeroButtons: {
      id?: number;
      block_hero_id?: (number | components["schemas"]["ItemsBlockHero"]) | null;
      item?: (string | { [key: string]: any })[] | null;
      collection?: string | null;
    };
    ItemsBlockHeroTranslations: {
      id?: number;
      block_hero_id?: (number | components["schemas"]["ItemsBlockHero"]) | null;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      subtitle?: string | null;
      title?: string | null;
    };
    ItemsBlockLogoCloud: {
      id?: number;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      translations?: (
        | number
        | components["schemas"]["ItemsBlockLogoCloudTranslations"]
      )[];
      images?: (number | components["schemas"]["ItemsBlockLogoCloudFiles"])[];
    };
    ItemsBlockLogoCloudFiles: {
      id?: number;
      block_logo_cloud_id?:
        | (number | components["schemas"]["ItemsBlockLogoCloud"])
        | null;
      directus_files_id?: (string | components["schemas"]["Files"]) | null;
    };
    ItemsBlockLogoCloudTranslations: {
      id?: number;
      block_logo_cloud_id?:
        | (number | components["schemas"]["ItemsBlockLogoCloud"])
        | null;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      section?: string | null;
    };
    ItemsBlockPageLink: {
      id?: number;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      page?: (number | components["schemas"]["ItemsPages"]) | null;
      button?: (number | components["schemas"]["ItemsBlockButton"]) | null;
    };
    ItemsBlockTitle: {
      id?: number;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      translations?: (
        | number
        | components["schemas"]["ItemsBlockTitleTranslations"]
      )[];
    };
    ItemsBlockTitleTranslations: {
      id?: number;
      block_title_id?:
        | (number | components["schemas"]["ItemsBlockTitle"])
        | null;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
    };
    ItemsBlockchains: {
      id?: number;
      name?: string | null;
      created_at?: string | null;
      updated_at?: string | null;
    };
    ItemsBlocks: { [key: string]: any };
    ItemsCategories: {
      id?: number;
      created_at?: string | null;
      updated_at?: string | null;
      name?: string;
    };
    ItemsCurrencies: {
      id?: number;
      status?: string;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      name?: string | null;
      sign?: string | null;
      symbol?: string | null;
    };
    ItemsFiats: {
      id?: number;
      created_at?: string | null;
      name?: string;
      sign?: string;
      symbol?: string;
    };
    ItemsFollowers: {
      id?: number;
      created_at?: string | null;
      provider_id?: (number | components["schemas"]["ItemsProviders"]) | null;
      username?: string;
      is_following?: boolean;
      is_sent?: boolean;
    };
    ItemsGrantBlockchains: { [key: string]: any };
    ItemsGrantCategories: { [key: string]: any };
    ItemsGrants: {
      id?: number;
      created_at?: string;
      updated_at?: string;
      name?: string;
      description?: string | null;
      active?: boolean;
      url_application?: string;
      url_info?: string | null;
      content?: string;
      slug?: string;
      funding_minimum?: number | null;
      funding_maximum?: number | null;
      /** The currency of the grant */
      funding_minimum_currency?:
        | (number | components["schemas"]["ItemsFiats"])
        | null;
      funding_maximum_currency?:
        | (number | components["schemas"]["ItemsFiats"])
        | null;
      github?: string | null;
      discord?: string | null;
      telegram?: string | null;
      website?: string | null;
      logo?: string;
      twitter?: string | null;
      funding?: string;
    };
    ItemsLanguages: {
      code?: string;
      name?: string | null;
      direction?: string | null;
    };
    ItemsPages: {
      id?: number;
      status?: string;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      translations?: (
        | number
        | components["schemas"]["ItemsPagesTranslations"]
      )[];
      content?: (number | components["schemas"]["ItemsPagesContent"])[];
    };
    ItemsPagesContent: {
      id?: number;
      pages_id?: (number | components["schemas"]["ItemsPages"]) | null;
      item?: (string | { [key: string]: any })[] | null;
      collection?: string | null;
    };
    ItemsPagesTranslations: {
      id?: number;
      pages_id?: (number | components["schemas"]["ItemsPages"]) | null;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      slug?: string | null;
    };
    ItemsWeb3: { [key: string]: any };
    ItemsWeb3Blockchains: {
      id?: number;
      status?: string;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      name?: string | null;
    };
    ItemsWeb3Categories: {
      id?: number;
      status?: string;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      translations?: (
        | number
        | components["schemas"]["ItemsWeb3CategoriesTranslations"]
      )[];
    };
    ItemsWeb3CategoriesTranslations: {
      id?: number;
      web3_categories_id?:
        | (number | components["schemas"]["ItemsWeb3Categories"])
        | null;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      name?: string | null;
    };
    ItemsWeb3Grants: {
      id?: number;
      status?: string;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      active?: boolean | null;
      content?: string | null;
      slug?: string | null;
      url_application?: string | null;
      url_info?: string | null;
      funding_minimum?: number | null;
      funding_maximum?: number | null;
      github?: string | null;
      discord?: string | null;
      telegram?: string | null;
      website?: string | null;
      twitter?: string | null;
      logo?: (string | components["schemas"]["Files"]) | null;
      funding_minimum_currency_id?:
        | (number | components["schemas"]["ItemsCurrencies"])
        | null;
      funding_maximum_currency_id?:
        | (number | components["schemas"]["ItemsCurrencies"])
        | null;
      translations?: (
        | number
        | components["schemas"]["ItemsWeb3GrantsTranslations"]
      )[];
      /** On which blockchains the grant is active */
      grant_blockchains?: (
        | number
        | components["schemas"]["ItemsWeb3GrantsWeb3Blockchains"]
      )[];
      /** Which use cases does the grant suggest */
      grant_use_cases?: (
        | number
        | components["schemas"]["ItemsWeb3GrantsWeb3UseCases"]
      )[];
      /** Which categories best match the grant */
      grant_categories?: (
        | number
        | components["schemas"]["ItemsWeb3GrantsWeb3Categories"]
      )[];
      funding?: string;
      application?: string;
      socials?: string;
      grant_relationships?: string;
      "links-hc-lid"?: string;
      rfps?: (number | components["schemas"]["ItemsWeb3GrantsWeb3Rfps"])[];
    };
    ItemsWeb3GrantsTranslations: {
      id?: number;
      web3_grants_id?:
        | (number | components["schemas"]["ItemsWeb3Grants"])
        | null;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      name?: string | null;
      description?: string | null;
    };
    ItemsWeb3GrantsWeb3Blockchains: {
      id?: number;
      web3_grants_id?:
        | (number | components["schemas"]["ItemsWeb3Grants"])
        | null;
      web3_blockchains_id?:
        | (number | components["schemas"]["ItemsWeb3Blockchains"])
        | null;
    };
    ItemsWeb3GrantsWeb3Categories: {
      id?: number;
      web3_grants_id?:
        | (number | components["schemas"]["ItemsWeb3Grants"])
        | null;
      web3_categories_id?:
        | (number | components["schemas"]["ItemsWeb3Categories"])
        | null;
    };
    ItemsWeb3GrantsWeb3Rfps: {
      id?: number;
      web3_grants_id?:
        | (number | components["schemas"]["ItemsWeb3Grants"])
        | null;
      web3_rfps_id?: (number | components["schemas"]["ItemsWeb3Rfps"]) | null;
    };
    ItemsWeb3GrantsWeb3UseCases: {
      id?: number;
      web3_grants_id?:
        | (number | components["schemas"]["ItemsWeb3Grants"])
        | null;
      web3_use_cases_id?:
        | (number | components["schemas"]["ItemsWeb3UseCases"])
        | null;
    };
    ItemsWeb3RfpPriorities: {
      id?: number;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      translations?: (
        | number
        | components["schemas"]["ItemsWeb3RfpPrioritiesTranslations"]
      )[];
    };
    ItemsWeb3RfpPrioritiesTranslations: {
      id?: number;
      web3_rfp_priorities_id?:
        | (number | components["schemas"]["ItemsWeb3RfpPriorities"])
        | null;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      priority?: string | null;
    };
    ItemsWeb3RfpStatuses: {
      id?: number;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      translations?: (
        | number
        | components["schemas"]["ItemsWeb3RfpStatusesTranslations"]
      )[];
    };
    ItemsWeb3RfpStatusesTranslations: {
      id?: number;
      web3_rfp_statuses_id?:
        | (number | components["schemas"]["ItemsWeb3RfpStatuses"])
        | null;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      status?: string | null;
    };
    ItemsWeb3Rfps: {
      id?: number;
      status?: string;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      funding_minimum?: number | null;
      funding_maximum?: number | null;
      funding_mimum_currency_id?:
        | (number | components["schemas"]["ItemsCurrencies"])
        | null;
      funding_maximum_currency_id?:
        | (number | components["schemas"]["ItemsCurrencies"])
        | null;
      deadline_at?: string | null;
      rfp_status?:
        | (number | components["schemas"]["ItemsWeb3RfpStatuses"])
        | null;
      priority?:
        | (number | components["schemas"]["ItemsWeb3RfpPriorities"])
        | null;
      slug?: string | null;
      translations?: (
        | number
        | components["schemas"]["ItemsWeb3RfpsTranslations"]
      )[];
    };
    ItemsWeb3RfpsTranslations: {
      id?: number;
      web3_rfps_id?: (number | components["schemas"]["ItemsWeb3Rfps"]) | null;
      languages_code?:
        | (string | components["schemas"]["ItemsLanguages"])
        | null;
      name?: string | null;
      description?: string | null;
    };
    ItemsWeb3UseCases: {
      id?: number;
      status?: string;
      sort?: number | null;
      user_created?: (string | components["schemas"]["Users"]) | null;
      date_created?: string | null;
      user_updated?: (string | components["schemas"]["Users"]) | null;
      date_updated?: string | null;
      translations?: (
        | number
        | components["schemas"]["ItemsWeb3UseCasesTranslations"]
      )[];
    };
    ItemsWeb3UseCasesTranslations: {
      id?: number;
      web3_use_cases_id?:
        | (number | components["schemas"]["ItemsWeb3UseCases"])
        | null;
      languages_id?: (string | components["schemas"]["ItemsLanguages"]) | null;
      name?: string | null;
    };
    Activity: {
      /** Unique identifier for the object. */
      id?: number;
      /** Action that was performed. */
      action?: "create" | "update" | "delete" | "login";
      /** The user who performed this action. */
      user?: (string | components["schemas"]["Users"]) | null;
      /** When the action happened. */
      timestamp?: string;
      /** The IP address of the user at the time the action took place. */
      ip?: string;
      /** User agent string of the browser the user used when the action took place. */
      user_agent?: string;
      /** Collection identifier in which the item resides. */
      collection?: string | components["schemas"]["Collections"];
      /** Unique identifier for the item the action applied to. This is always a string, even for integer primary keys. */
      item?: string;
      /** User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app. */
      comment?: string | null;
      /** Origin of the request when the action took place. */
      origin?: string;
      revisions?: (number | components["schemas"]["Revisions"])[];
    };
    Collections: {
      /** The collection key. */
      collection?: string;
      icon?: string | null;
      note?: string | null;
      display_template?: string | null;
      hidden?: boolean;
      singleton?: boolean;
      translations?: { [key: string]: any } | null;
      archive_field?: string | null;
      archive_app_filter?: boolean;
      archive_value?: string | null;
      unarchive_value?: string | null;
      sort_field?: string | null;
      accountability?: string | null;
      color?: string | null;
      item_duplication_fields?: { [key: string]: any } | null;
      sort?: number | null;
      group?: (string | components["schemas"]["Collections"]) | null;
      collapse?: string;
      collection_divider?: string;
      archive_divider?: string;
      sort_divider?: string;
      accountability_divider?: string;
      duplication_divider?: string;
    };
    Fields: {
      id?: number;
      /** Unique name of the collection this field is in. */
      collection?: string;
      /** Unique name of the field. Field name is unique within the collection. */
      field?: string;
      special?: string[] | null;
      interface?: string | null;
      options?: { [key: string]: any } | null;
      display?: string | null;
      display_options?: { [key: string]: any } | null;
      readonly?: boolean;
      hidden?: boolean;
      sort?: number | null;
      width?: string | null;
      translations?: { [key: string]: any } | null;
      note?: string | null;
      conditions?: { [key: string]: any } | null;
      required?: boolean | null;
      group?: (number | components["schemas"]["Fields"]) | null;
      validation?: { [key: string]: any } | null;
      validation_message?: string | null;
    };
    Files: {
      /** Unique identifier for the file. */
      id?: string;
      /** Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`). */
      storage?: string;
      /** Name of the file on disk. By default, Directus uses a random hash for the filename. */
      filename_disk?: string;
      /** How you want to the file to be named when it's being downloaded. */
      filename_download?: string;
      /** Title for the file. Is extracted from the filename on upload, but can be edited by the user. */
      title?: string;
      /** MIME type of the file. */
      type?: string;
      /** Virtual folder where this file resides in. */
      folder?: (string | components["schemas"]["Folders"]) | null;
      /** Who uploaded the file. */
      uploaded_by?: string | components["schemas"]["Users"];
      /** When the file was uploaded. */
      uploaded_on?: string;
      modified_by?: (string | components["schemas"]["Users"]) | null;
      modified_on?: string;
      /** Character set of the file. */
      charset?: string | null;
      /** Size of the file in bytes. */
      filesize?: number;
      /** Width of the file in pixels. Only applies to images. */
      width?: number | null;
      /** Height of the file in pixels. Only applies to images. */
      height?: number | null;
      /** Duration of the file in seconds. Only applies to audio and video. */
      duration?: number | null;
      /** Where the file was embedded from. */
      embed?: string | null;
      /** Description for the file. */
      description?: string | null;
      /** Where the file was created. Is automatically populated based on EXIF data for images. */
      location?: string | null;
      /** Tags for the file. Is automatically populated based on EXIF data for images. */
      tags?: string[] | null;
      /** IPTC, EXIF, and ICC metadata extracted from file */
      metadata?: { [key: string]: any } | null;
      storage_divider?: string;
    };
    Folders: {
      /** Unique identifier for the folder. */
      id?: string;
      /** Name of the folder. */
      name?: string;
      /** Unique identifier of the parent folder. This allows for nested folders. */
      parent?: (string | components["schemas"]["Folders"]) | null;
    };
    Permissions: {
      /** Unique identifier for the permission. */
      id?: number;
      /** Unique identifier of the role this permission applies to. */
      role?: string | null;
      /** What collection this permission applies to. */
      collection?: string;
      /** What action this permission applies to. */
      action?: "create" | "read" | "update" | "delete";
      /** JSON structure containing the permissions checks for this permission. */
      permissions?: { [key: string]: any } | null;
      /** JSON structure containing the validation checks for this permission. */
      validation?: { [key: string]: any } | null;
      /** JSON structure containing the preset value for created/updated items. */
      presets?: { [key: string]: any } | null;
      /** CSV of fields that the user is allowed to interact with. */
      fields?: string[] | null;
    };
    Presets: {
      /** Unique identifier for this single collection preset. */
      id?: number;
      /** Name for the bookmark. If this is set, the preset will be considered a bookmark. */
      bookmark?: string | null;
      /** The unique identifier of the user to whom this collection preset applies. */
      user?: (string | components["schemas"]["Users"]) | null;
      /** The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role. */
      role?: (string | components["schemas"]["Roles"]) | null;
      /** What collection this collection preset is used for. */
      collection?: string | components["schemas"]["Collections"];
      /** Search query. */
      search?: string | null;
      /** Key of the layout that is used. */
      layout?: string;
      /** Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
      layout_query?: { [key: string]: any } | null;
      /** Options of the views. The properties in here are controlled by the layout. */
      layout_options?: { [key: string]: any } | null;
      refresh_interval?: number | null;
      filter?: { [key: string]: any } | null;
      icon?: string;
      color?: string | null;
    };
    Relations: {
      /** Unique identifier for the relation. */
      id?: number;
      /** Collection that has the field that holds the foreign key. */
      many_collection?: string;
      /** Foreign key. Field that holds the primary key of the related collection. */
      many_field?: string;
      /** Collection on the _one_ side of the relationship. */
      one_collection?: string;
      /** Alias column that serves as the _one_ side of the relationship. */
      one_field?: string | null;
      one_collection_field?: string | null;
      one_allowed_collections?: string[] | null;
      /** Field on the junction table that holds the many field of the related relation. */
      junction_field?: string | null;
      sort_field?: string | null;
      one_deselect_action?: string;
    };
    Revisions: {
      /** Unique identifier for the revision. */
      id?: number;
      /** Unique identifier for the activity record. */
      activity?: number | components["schemas"]["Activity"];
      /** Collection of the updated item. */
      collection?: string | components["schemas"]["Collections"];
      /** Primary key of updated item. */
      item?: string;
      /** Copy of item state at time of update. */
      data?: { [key: string]: any } | null;
      /** Changes between the previous and the current revision. */
      delta?: { [key: string]: any };
      /** If the current item was updated relationally, this is the id of the parent revision record */
      parent?: number | null;
    };
    Roles: {
      /** Unique identifier for the role. */
      id?: string;
      /** Name of the role. */
      name?: string;
      /** The role's icon. */
      icon?: string;
      /** Description of the role. */
      description?: string | null;
      /** Array of IP addresses that are allowed to connect to the API as a user of this role. */
      ip_access?: string[];
      /** Whether or not this role enforces the use of 2FA. */
      enforce_tfa?: boolean;
      /** Admin role. If true, skips all permission checks. */
      admin_access?: boolean;
      /** The users in the role are allowed to use the app. */
      app_access?: boolean;
      users?: (string | components["schemas"]["Users"])[];
    };
    Settings: {
      /** Unique identifier for the setting. */
      id?: number;
      /** The name of the project. */
      project_name?: string;
      /** The url of the project. */
      project_url?: string | null;
      /** The brand color of the project. */
      project_color?: string | null;
      /** The logo of the project. */
      project_logo?: string | null;
      /** The foreground of the project. */
      public_foreground?: string | null;
      /** The background of the project. */
      public_background?: string | null;
      /** Note rendered on the public pages of the app. */
      public_note?: string | null;
      /** Allowed authentication login attempts before the user's status is set to blocked. */
      auth_login_attempts?: number;
      /** Authentication password policy. */
      auth_password_policy?: string | null;
      /** What transformations are allowed in the assets endpoint. */
      storage_asset_transform?: ("all" | "none" | "presets") | null;
      /** Array of allowed */
      storage_asset_presets?:
        | {
            /** Key for the asset. Used in the assets endpoint. */
            key?: string;
            /** Whether to crop the thumbnail to match the size, or maintain the aspect ratio. */
            fit?: "cover" | "contain" | "inside" | "outside";
            /** Width of the thumbnail. */
            width?: number;
            /** Height of the thumbnail. */
            height?: number;
            /** No image upscale */
            withoutEnlargement?: boolean;
            /** Quality of the compression used. */
            quality?: number;
            /** Reformat output image */
            format?: "" | "jpeg" | "png" | "webp" | "tiff";
            /** Additional transformations to apply */
            transforms?:
              | {
                  /** The Sharp method name */
                  method?: string;
                  /** A list of arguments to pass to the Sharp method */
                  arguments?:
                    | {
                        /** A JSON representation of the argument value */
                        argument?: string;
                      }[]
                    | null;
                }[]
              | null;
          }[]
        | null;
      custom_css?: string | null;
      /** Default folder to place files */
      storage_default_folder?: string;
      basemaps?: { [key: string]: any } | null;
      mapbox_key?: string | null;
      module_bar?: { [key: string]: any } | null;
      project_descriptor?: string | null;
      translation_strings?: { [key: string]: any } | null;
      default_language?: string;
      custom_aspect_ratios?: { [key: string]: any } | null;
      branding_divider?: string;
      modules_divider?: string;
      security_divider?: string;
      files_divider?: string;
      map_divider?: string;
      image_editor?: string;
    };
    Users: {
      /** Unique identifier for the user. */
      id?: string;
      /** First name of the user. */
      first_name?: string;
      /** Last name of the user. */
      last_name?: string;
      /** Unique email address for the user. */
      email?: string;
      /** Password of the user. */
      password?: string;
      /** The user's location. */
      location?: string | null;
      /** The user's title. */
      title?: string | null;
      /** The user's description. */
      description?: string | null;
      /** The user's tags. */
      tags?: string[] | null;
      /** The user's avatar. */
      avatar?: (string | components["schemas"]["Files"]) | null;
      /** The user's language used in Directus. */
      language?: string;
      /** What theme the user is using. */
      theme?: "light" | "dark" | "auto";
      /** The 2FA secret string that's used to generate one time passwords. */
      tfa_secret?: string | null;
      /** Status of the user. */
      status?: "active" | "invited" | "draft" | "suspended" | "deleted";
      /** Unique identifier of the role of this user. */
      role?: string | components["schemas"]["Roles"];
      /** Static token for the user. */
      token?: string | null;
      last_access?: string | null;
      /** Last page that the user was on. */
      last_page?: string | null;
      provider?: string;
      external_identifier?: string | null;
      auth_data?: { [key: string]: any } | null;
      email_notifications?: boolean | null;
      preferences_divider?: string;
      admin_divider?: string;
    };
    Webhooks: {
      /** The index of the webhook. */
      id?: number;
      /** The name of the webhook. */
      name?: string;
      /** Method used in the webhook. */
      method?: string;
      /** The url of the webhook. */
      url?: string | null;
      /** The status of the webhook. */
      status?: string;
      /** If yes, send the content of what was done */
      data?: boolean;
      /** The actions that triggers this webhook. */
      actions?: string[] | null;
      collections?: string[];
      headers?: { [key: string]: any } | null;
      triggers_divider?: string;
    };
    Flows: {
      /** Unique identifier for the flow. */
      id?: string;
      /** The name of the flow. */
      name?: string;
      /** Icon displayed in the Admin App for the flow. */
      icon?: string;
      /** Color of the icon displayed in the Admin App for the flow. */
      color?: string | null;
      description?: string | null;
      /** Current status of the flow. */
      status?: "active" | "inactive";
      /** Type of trigger for the flow. One of `hook`, `webhook`, `operation`, `schedule`, `manual`. */
      trigger?: string;
      /** The permission used during the flow. One of `$public`, `$trigger`, `$full`, or UUID of a role. */
      accountability?: string;
      /** Options of the selected trigger for the flow. */
      options?: { [key: string]: any } | null;
      /** UUID of the operation connected to the trigger in the flow. */
      operation?: string | components["schemas"]["Operations"];
      /** Timestamp in ISO8601 when the flow was created. */
      date_created?: string | null;
      /** The user who created the flow. */
      user_created?: string | components["schemas"]["Users"];
      operations?: (string | components["schemas"]["Operations"])[];
    };
    Operations: {
      /** Unique identifier for the operation. */
      id?: string;
      /** The name of the operation. */
      name?: string;
      /** Key for the operation. Must be unique within a given flow. */
      key?: string;
      /** Type of operation. One of `log`, `mail`, `notification`, `create`, `read`, `request`, `sleep`, `transform`, `trigger`, `condition`, or any type of custom operation extensions. */
      type?: string;
      /** Position of the operation on the X axis within the flow workspace. */
      position_x?: number;
      /** Position of the operation on the Y axis within the flow workspace. */
      position_y?: number;
      /** Options depending on the type of the operation. */
      options?: { [key: string]: any } | null;
      /** The operation triggered when the current operation succeeds (or `then` logic of a condition operation). */
      resolve?: string | components["schemas"]["Operations"];
      /** The operation triggered when the current operation fails (or `otherwise` logic of a condition operation). */
      reject?: string | components["schemas"]["Operations"];
      flow?: string | components["schemas"]["Flows"];
      /** Timestamp in ISO8601 when the operation was created. */
      date_created?: string | null;
      /** The user who created the operation. */
      user_created?: string | components["schemas"]["Users"];
    };
    ItemsGrantProjectPayments: {
      id?: number;
      created_at?: string | null;
      grant_id?: number | components["schemas"]["ItemsGrants"];
      project_id?: number | components["schemas"]["ItemsProjects"];
      amount_paid_value?: number;
      amount_paid_fiat?: number | components["schemas"]["ItemsFiats"];
      transaction_reference?: string;
    };
    ItemsGrantProjects: {
      id?: number;
      created_at?: string | null;
      last_updated_at?: string | null;
      grant_id?: number | components["schemas"]["ItemsGrants"];
      project_id?: number | components["schemas"]["ItemsProjects"];
      amount_requested_value?: number | null;
      amount_requested_curency?:
        | (number | components["schemas"]["ItemsFiats"])
        | null;
      start_date?: string | null;
      end_date?: string | null;
    };
    ItemsGrantRfps: {
      id?: number;
      created_at?: string | null;
      grant_id?: (number | components["schemas"]["ItemsGrants"]) | null;
      rfp_id?: (number | components["schemas"]["ItemsRfps"]) | null;
    };
    ItemsGrantUseCases: { [key: string]: any };
    ItemsNcEvolutions: {
      id?: number;
      title?: string;
      titleDown?: string | null;
      description?: string | null;
      batch?: number | null;
      checksum?: string | null;
      status?: number | null;
      created?: string | null;
      created_at?: string | null;
      updated_at?: string | null;
    };
    ItemsPosts: {
      id?: string;
      created_at?: string | null;
      author_id?: string | components["schemas"]["ItemsAuthors"];
      text?: string;
      is_relevant?: boolean | null;
      reply_id?: (number | components["schemas"]["ItemsReplies"]) | null;
      media?: string | null;
    };
    ItemsProjectUseCases: {
      id?: number;
      created_at?: string | null;
      use_case_id?: number | components["schemas"]["ItemsCategories"];
      project_id?: number | components["schemas"]["ItemsProjects"];
    };
    ItemsProjects: {
      id?: number;
      created_at?: string | null;
      last_updated_at?: string | null;
      name?: string;
      logo?: string | null;
      url?: string | null;
    };
    ItemsProviders: {
      id?: number;
      created_at?: string | null;
      name?: string;
    };
    ItemsQueries: {
      id?: number;
      created_at?: string | null;
      provider_id?: number | components["schemas"]["ItemsProviders"];
      query?: string;
      limit?: number;
      name?: string | null;
      is_active?: boolean;
    };
    ItemsReplies: {
      id?: number;
      created_at?: string | null;
      reply?: string;
      is_generated?: boolean | null;
    };
    ItemsRfpPriorities: {
      id?: number;
      created_at?: string | null;
      name?: string | null;
    };
    ItemsRfpStatuses: {
      id?: number;
      created_at?: string | null;
      status?: string | null;
    };
    ItemsRfpUseCases: {
      id?: number;
      created_at?: string | null;
      rfp_id?: number | components["schemas"]["ItemsRfps"];
      use_case_id?: number | components["schemas"]["ItemsUseCases"];
    };
    ItemsRfps: {
      id?: number;
      created_at?: string | null;
      name?: string;
      description?: string;
      funding_minimum?: number | null;
      funding_minimum_currency?:
        | (number | components["schemas"]["ItemsFiats"])
        | null;
      funding_maximum?: number | null;
      funding_maximum_currency?:
        | (number | components["schemas"]["ItemsFiats"])
        | null;
      deadline_at?: string | null;
      status_id?: (number | components["schemas"]["ItemsRfpStatuses"]) | null;
      priority_id?:
        | (number | components["schemas"]["ItemsRfpPriorities"])
        | null;
    };
    ItemsUseCases: {
      id?: number;
      created_at?: string | null;
      updated_at?: string | null;
      name?: string;
    };
  };
  responses: {
    /** Error: Not found. */
    NotFoundError: {
      content: {
        "application/json": {
          error?: {
            code?: number;
            message?: string;
          };
        };
      };
    };
    /** Error: Unauthorized request */
    UnauthorizedError: {
      content: {
        "application/json": {
          error?: {
            code?: number;
            message?: string;
          };
        };
      };
    };
  };
  parameters: {
    /** Index */
    Id: number;
    /** Unique identifier for the object. */
    UUId: string;
    /** Collection of which you want to retrieve the items from. */
    Collection: string;
    /** Filter by items that contain the given search query in one of their fields. */
    Search: string;
    /** Cursor for use in pagination. Often used in combination with limit. */
    Page: number;
    /** How many items to skip when fetching data. */
    Offset: number;
    /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
    Sort: string[];
    /** What metadata to return in the response. */
    Meta: string;
    /** A limit on the number of objects that are returned. */
    Limit: number;
    /** Select items in collection by given conditions. */
    Filter: string[];
    /** Control what fields are being returned in the object. */
    Fields: string[];
    /** Controls if the API sets a cookie or returns a JWT on successful login. */
    Mode: "jwt" | "cookie";
    /** Saves the API response to a file. Accepts one of "csv", "json", "xml", "yaml". */
    Export: "csv" | "json" | "xml" | "yaml";
  };
}

export interface operations {
  /** Image typed files can be dynamically resized and transformed to fit any need. */
  getAsset: {
    parameters: {
      path: {
        /** The id of the file. */
        id: string;
      };
      query: {
        /** The key of the asset size configured in settings. */
        key?: string;
        /** A JSON array of image transformations */
        transforms?: string;
        /** Download the asset to your computer */
        download?: boolean;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "text/plain": string;
        };
      };
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a Temporary Access Token */
  login: {
    responses: {
      /** Successful authentification */
      200: {
        content: {
          "application/json": {
            data?: {
              access_token?: string;
              expires?: number;
              refresh_token?: string;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Email address of the user you're retrieving the access token for. */
          email: string;
          /** Password of the user. */
          password: string;
          /** Choose between retrieving the token as a string, or setting it as a cookie. */
          mode?: "json" | "cookie";
          /** If 2FA is enabled, you need to pass the one time password. */
          otp?: string;
        };
      };
    };
  };
  /** Refresh a Temporary Access Token. */
  refresh: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: {
              access_token?: string;
              expires?: number;
              refresh_token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** JWT access token you want to refresh. This token can't be expired. */
          refresh_token?: string;
        };
      };
    };
  };
  /** Log Out */
  logout: {
    responses: {
      /** Request successful */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** JWT access token you want to logout. */
          refresh_token?: string;
        };
      };
    };
  };
  /** Request a reset password email to be send. */
  passwordRequest: {
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Email address of the user you're requesting a reset for. */
          email: string;
        };
      };
    };
  };
  /** The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password. */
  passwordReset: {
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** One-time use JWT token that is used to verify the user. */
          token: string;
          /** New password for the user. */
          password: string;
        };
      };
    };
  };
  /** List configured OAuth providers. */
  oauth: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: string[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Start OAuth flow using the specified provider */
  oauthProvider: {
    parameters: {
      path: {
        /** Key of the activated OAuth provider. */
        provider: string;
      };
      query: {
        /** Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned. */
        redirect?: string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: {
              token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** List all installed custom interfaces. */
  getInterfaces: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List all installed custom layouts. */
  getLayouts: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List all installed custom displays. */
  getDisplays: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List all installed custom modules. */
  getModules: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve the current schema. This endpoint is only available to admin users. */
  schemaSnapshot: {
    parameters: {
      query: {
        /** Saves the API response to a file. Accepts one of "csv", "json", "xml", "yaml". */
        export?: components["parameters"]["Export"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Schema"];
          };
          "text/yaml": string;
        };
      };
      403: components["responses"]["UnauthorizedError"];
    };
  };
  /** Update the instance's schema by passing the diff previously retrieved via `/schema/diff` endpoint in the request body. This endpoint is only available to admin users. */
  schemaApply: {
    responses: {
      /** Successful request */
      204: never;
      403: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          data?: components["schemas"]["Diff"];
        };
      };
    };
  };
  /** Compare the current instance's schema against the schema snapshot in JSON request body or a JSON/YAML file and retrieve the difference. This endpoint is only available to admin users. */
  schemaDiff: {
    parameters: {
      query: {
        /** Bypass version and database vendor restrictions. */
        force?: boolean;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Diff"];
          };
        };
      };
      /** No schema difference. */
      204: never;
      403: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          data?: components["schemas"]["Schema"];
        };
        "multipart/form-data": {
          file?: string;
        };
      };
    };
  };
  /** Perform a system status check and return the options. */
  serverInfo: {
    parameters: {
      query: {
        /** The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server. */
        super_admin_token: number;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Ping, pong. Ping.. pong. */
  ping: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/text": string;
        };
      };
    };
  };
  /** Generate a hash for a given string. */
  "hash-generate": {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** String to hash. */
          string: string;
        };
      };
    };
  };
  /** Generate a hash for a given string. */
  "hash-verify": {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** String to hash. */
          string: string;
          /** Hash you want to verify against. */
          hash: string;
        };
      };
    };
  };
  /** Re-sort items in collection based on start and to value of item */
  sort: {
    parameters: {
      path: {
        /** Collection identifier */
        collection: string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Primary key of item to move */
          item?: number;
          /** Primary key of item where to move the current item to */
          to?: number;
        };
      };
    };
  };
  /** Import multiple records from a JSON or CSV file into a collection. */
  import: {
    parameters: {
      path: {
        /** Collection identifier */
        collection: string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          file?: string;
        };
      };
    };
  };
  /** Export a larger data set to a file in the File Library */
  export: {
    parameters: {
      path: {
        /** Collection identifier */
        collection: string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** What file format to save the export to. One of csv, xml, json */
          format: "csv" | "xml" | "json";
          query: components["schemas"]["Query"];
          file: components["schemas"]["Files"];
        };
      };
    };
  };
  /** Resets both the data and schema cache of Directus. */
  "clear-cache": {
    responses: {
      /** Successful request */
      200: unknown;
    };
  };
  /** Returns a random string of given length. */
  random: {
    parameters: {
      query: {
        /** Length of the random string. */
        length?: number;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: string;
          };
        };
      };
    };
  };
  /** List the authors items. */
  readItemsAuthors: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAuthors"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new authors item. */
  createItemsAuthors: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAuthors"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsAuthors"][]
          | components["schemas"]["ItemsAuthors"];
      };
    };
  };
  /** Retrieve a single authors item by unique identifier. */
  readSingleItemsAuthors: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAuthors"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing authors item. */
  deleteSingleItemsAuthors: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing authors item. */
  updateSingleItemsAuthors: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsAuthors"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsAuthors"];
      };
    };
  };
  /** List the block_button items. */
  readItemsBlockButton: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButton"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_button item. */
  createItemsBlockButton: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButton"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockButton"][]
          | components["schemas"]["ItemsBlockButton"];
      };
    };
  };
  /** Retrieve a single block_button item by unique identifier. */
  readSingleItemsBlockButton: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButton"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_button item. */
  deleteSingleItemsBlockButton: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_button item. */
  updateSingleItemsBlockButton: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButton"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockButton"];
      };
    };
  };
  /** List the block_button_translations items. */
  readItemsBlockButtonTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButtonTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_button_translations item. */
  createItemsBlockButtonTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButtonTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockButtonTranslations"][]
          | components["schemas"]["ItemsBlockButtonTranslations"];
      };
    };
  };
  /** Retrieve a single block_button_translations item by unique identifier. */
  readSingleItemsBlockButtonTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButtonTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_button_translations item. */
  deleteSingleItemsBlockButtonTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_button_translations item. */
  updateSingleItemsBlockButtonTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockButtonTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockButtonTranslations"];
      };
    };
  };
  /** List the block_cal items. */
  readItemsBlockCal: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCal"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_cal item. */
  createItemsBlockCal: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCal"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockCal"][]
          | components["schemas"]["ItemsBlockCal"];
      };
    };
  };
  /** Retrieve a single block_cal item by unique identifier. */
  readSingleItemsBlockCal: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCal"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_cal item. */
  deleteSingleItemsBlockCal: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_cal item. */
  updateSingleItemsBlockCal: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCal"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCal"];
      };
    };
  };
  /** List the block_cal_title items. */
  readItemsBlockCalTitle: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCalTitle"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_cal_title item. */
  createItemsBlockCalTitle: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCalTitle"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockCalTitle"][]
          | components["schemas"]["ItemsBlockCalTitle"];
      };
    };
  };
  /** Retrieve a single block_cal_title item by unique identifier. */
  readSingleItemsBlockCalTitle: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCalTitle"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_cal_title item. */
  deleteSingleItemsBlockCalTitle: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_cal_title item. */
  updateSingleItemsBlockCalTitle: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockCalTitle"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockCalTitle"];
      };
    };
  };
  /** List the block_external_link items. */
  readItemsBlockExternalLink: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockExternalLink"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_external_link item. */
  createItemsBlockExternalLink: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockExternalLink"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockExternalLink"][]
          | components["schemas"]["ItemsBlockExternalLink"];
      };
    };
  };
  /** Retrieve a single block_external_link item by unique identifier. */
  readSingleItemsBlockExternalLink: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockExternalLink"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_external_link item. */
  deleteSingleItemsBlockExternalLink: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_external_link item. */
  updateSingleItemsBlockExternalLink: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockExternalLink"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockExternalLink"];
      };
    };
  };
  /** List the block_external_link_translations items. */
  readItemsBlockExternalLinkTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockExternalLinkTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_external_link_translations item. */
  createItemsBlockExternalLinkTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockExternalLinkTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockExternalLinkTranslations"][]
          | components["schemas"]["ItemsBlockExternalLinkTranslations"];
      };
    };
  };
  /** Retrieve a single block_external_link_translations item by unique identifier. */
  readSingleItemsBlockExternalLinkTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockExternalLinkTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_external_link_translations item. */
  deleteSingleItemsBlockExternalLinkTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_external_link_translations item. */
  updateSingleItemsBlockExternalLinkTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockExternalLinkTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockExternalLinkTranslations"];
      };
    };
  };
  /** List the block_features items. */
  readItemsBlockFeatures: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFeatures"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_features item. */
  createItemsBlockFeatures: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFeatures"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockFeatures"][]
          | components["schemas"]["ItemsBlockFeatures"];
      };
    };
  };
  /** Retrieve a single block_features item by unique identifier. */
  readSingleItemsBlockFeatures: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFeatures"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_features item. */
  deleteSingleItemsBlockFeatures: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_features item. */
  updateSingleItemsBlockFeatures: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFeatures"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFeatures"];
      };
    };
  };
  /** List the block_features_translations items. */
  readItemsBlockFeaturesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFeaturesTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_features_translations item. */
  createItemsBlockFeaturesTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFeaturesTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockFeaturesTranslations"][]
          | components["schemas"]["ItemsBlockFeaturesTranslations"];
      };
    };
  };
  /** Retrieve a single block_features_translations item by unique identifier. */
  readSingleItemsBlockFeaturesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFeaturesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_features_translations item. */
  deleteSingleItemsBlockFeaturesTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_features_translations item. */
  updateSingleItemsBlockFeaturesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockFeaturesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockFeaturesTranslations"];
      };
    };
  };
  /** List the block_hero items. */
  readItemsBlockHero: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHero"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_hero item. */
  createItemsBlockHero: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHero"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockHero"][]
          | components["schemas"]["ItemsBlockHero"];
      };
    };
  };
  /** Retrieve a single block_hero item by unique identifier. */
  readSingleItemsBlockHero: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHero"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_hero item. */
  deleteSingleItemsBlockHero: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_hero item. */
  updateSingleItemsBlockHero: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHero"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockHero"];
      };
    };
  };
  /** List the block_hero_buttons items. */
  readItemsBlockHeroButtons: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHeroButtons"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_hero_buttons item. */
  createItemsBlockHeroButtons: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHeroButtons"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockHeroButtons"][]
          | components["schemas"]["ItemsBlockHeroButtons"];
      };
    };
  };
  /** Retrieve a single block_hero_buttons item by unique identifier. */
  readSingleItemsBlockHeroButtons: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHeroButtons"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_hero_buttons item. */
  deleteSingleItemsBlockHeroButtons: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_hero_buttons item. */
  updateSingleItemsBlockHeroButtons: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHeroButtons"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockHeroButtons"];
      };
    };
  };
  /** List the block_hero_translations items. */
  readItemsBlockHeroTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHeroTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_hero_translations item. */
  createItemsBlockHeroTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHeroTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockHeroTranslations"][]
          | components["schemas"]["ItemsBlockHeroTranslations"];
      };
    };
  };
  /** Retrieve a single block_hero_translations item by unique identifier. */
  readSingleItemsBlockHeroTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHeroTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_hero_translations item. */
  deleteSingleItemsBlockHeroTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_hero_translations item. */
  updateSingleItemsBlockHeroTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockHeroTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockHeroTranslations"];
      };
    };
  };
  /** List the block_logo_cloud items. */
  readItemsBlockLogoCloud: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoCloud"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_logo_cloud item. */
  createItemsBlockLogoCloud: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoCloud"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockLogoCloud"][]
          | components["schemas"]["ItemsBlockLogoCloud"];
      };
    };
  };
  /** Retrieve a single block_logo_cloud item by unique identifier. */
  readSingleItemsBlockLogoCloud: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoCloud"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_logo_cloud item. */
  deleteSingleItemsBlockLogoCloud: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_logo_cloud item. */
  updateSingleItemsBlockLogoCloud: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoCloud"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogoCloud"];
      };
    };
  };
  /** List the block_logo_cloud_files items. */
  readItemsBlockLogoCloudFiles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoCloudFiles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_logo_cloud_files item. */
  createItemsBlockLogoCloudFiles: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoCloudFiles"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockLogoCloudFiles"][]
          | components["schemas"]["ItemsBlockLogoCloudFiles"];
      };
    };
  };
  /** Retrieve a single block_logo_cloud_files item by unique identifier. */
  readSingleItemsBlockLogoCloudFiles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoCloudFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_logo_cloud_files item. */
  deleteSingleItemsBlockLogoCloudFiles: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_logo_cloud_files item. */
  updateSingleItemsBlockLogoCloudFiles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoCloudFiles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogoCloudFiles"];
      };
    };
  };
  /** List the block_logo_cloud_translations items. */
  readItemsBlockLogoCloudTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoCloudTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_logo_cloud_translations item. */
  createItemsBlockLogoCloudTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoCloudTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockLogoCloudTranslations"][]
          | components["schemas"]["ItemsBlockLogoCloudTranslations"];
      };
    };
  };
  /** Retrieve a single block_logo_cloud_translations item by unique identifier. */
  readSingleItemsBlockLogoCloudTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoCloudTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_logo_cloud_translations item. */
  deleteSingleItemsBlockLogoCloudTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_logo_cloud_translations item. */
  updateSingleItemsBlockLogoCloudTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockLogoCloudTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockLogoCloudTranslations"];
      };
    };
  };
  /** List the block_page_link items. */
  readItemsBlockPageLink: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPageLink"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_page_link item. */
  createItemsBlockPageLink: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPageLink"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockPageLink"][]
          | components["schemas"]["ItemsBlockPageLink"];
      };
    };
  };
  /** Retrieve a single block_page_link item by unique identifier. */
  readSingleItemsBlockPageLink: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPageLink"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_page_link item. */
  deleteSingleItemsBlockPageLink: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_page_link item. */
  updateSingleItemsBlockPageLink: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockPageLink"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockPageLink"];
      };
    };
  };
  /** List the block_title items. */
  readItemsBlockTitle: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTitle"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_title item. */
  createItemsBlockTitle: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTitle"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockTitle"][]
          | components["schemas"]["ItemsBlockTitle"];
      };
    };
  };
  /** Retrieve a single block_title item by unique identifier. */
  readSingleItemsBlockTitle: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTitle"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_title item. */
  deleteSingleItemsBlockTitle: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_title item. */
  updateSingleItemsBlockTitle: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTitle"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTitle"];
      };
    };
  };
  /** List the block_title_translations items. */
  readItemsBlockTitleTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTitleTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new block_title_translations item. */
  createItemsBlockTitleTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTitleTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockTitleTranslations"][]
          | components["schemas"]["ItemsBlockTitleTranslations"];
      };
    };
  };
  /** Retrieve a single block_title_translations item by unique identifier. */
  readSingleItemsBlockTitleTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTitleTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing block_title_translations item. */
  deleteSingleItemsBlockTitleTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing block_title_translations item. */
  updateSingleItemsBlockTitleTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockTitleTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockTitleTranslations"];
      };
    };
  };
  /** List the blockchains items. */
  readItemsBlockchains: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockchains"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new blockchains item. */
  createItemsBlockchains: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockchains"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlockchains"][]
          | components["schemas"]["ItemsBlockchains"];
      };
    };
  };
  /** Retrieve a single blockchains item by unique identifier. */
  readSingleItemsBlockchains: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockchains"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing blockchains item. */
  deleteSingleItemsBlockchains: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing blockchains item. */
  updateSingleItemsBlockchains: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlockchains"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlockchains"];
      };
    };
  };
  /** List the blocks items. */
  readItemsBlocks: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlocks"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new blocks item. */
  createItemsBlocks: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlocks"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsBlocks"][]
          | components["schemas"]["ItemsBlocks"];
      };
    };
  };
  /** Retrieve a single blocks item by unique identifier. */
  readSingleItemsBlocks: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing blocks item. */
  deleteSingleItemsBlocks: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing blocks item. */
  updateSingleItemsBlocks: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsBlocks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsBlocks"];
      };
    };
  };
  /** List the categories items. */
  readItemsCategories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategories"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new categories item. */
  createItemsCategories: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategories"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsCategories"][]
          | components["schemas"]["ItemsCategories"];
      };
    };
  };
  /** Retrieve a single categories item by unique identifier. */
  readSingleItemsCategories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing categories item. */
  deleteSingleItemsCategories: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing categories item. */
  updateSingleItemsCategories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsCategories"];
      };
    };
  };
  /** List the currencies items. */
  readItemsCurrencies: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCurrencies"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new currencies item. */
  createItemsCurrencies: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCurrencies"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsCurrencies"][]
          | components["schemas"]["ItemsCurrencies"];
      };
    };
  };
  /** Retrieve a single currencies item by unique identifier. */
  readSingleItemsCurrencies: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCurrencies"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing currencies item. */
  deleteSingleItemsCurrencies: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing currencies item. */
  updateSingleItemsCurrencies: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsCurrencies"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsCurrencies"];
      };
    };
  };
  /** List the fiats items. */
  readItemsFiats: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFiats"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new fiats item. */
  createItemsFiats: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFiats"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsFiats"][]
          | components["schemas"]["ItemsFiats"];
      };
    };
  };
  /** Retrieve a single fiats item by unique identifier. */
  readSingleItemsFiats: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFiats"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing fiats item. */
  deleteSingleItemsFiats: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing fiats item. */
  updateSingleItemsFiats: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFiats"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsFiats"];
      };
    };
  };
  /** List the followers items. */
  readItemsFollowers: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFollowers"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new followers item. */
  createItemsFollowers: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFollowers"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsFollowers"][]
          | components["schemas"]["ItemsFollowers"];
      };
    };
  };
  /** Retrieve a single followers item by unique identifier. */
  readSingleItemsFollowers: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFollowers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing followers item. */
  deleteSingleItemsFollowers: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing followers item. */
  updateSingleItemsFollowers: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsFollowers"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsFollowers"];
      };
    };
  };
  /** List the grant_blockchains items. */
  readItemsGrantBlockchains: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantBlockchains"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new grant_blockchains item. */
  createItemsGrantBlockchains: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantBlockchains"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsGrantBlockchains"][]
          | components["schemas"]["ItemsGrantBlockchains"];
      };
    };
  };
  /** Retrieve a single grant_blockchains item by unique identifier. */
  readSingleItemsGrantBlockchains: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantBlockchains"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing grant_blockchains item. */
  deleteSingleItemsGrantBlockchains: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing grant_blockchains item. */
  updateSingleItemsGrantBlockchains: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantBlockchains"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsGrantBlockchains"];
      };
    };
  };
  /** List the grant_categories items. */
  readItemsGrantCategories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantCategories"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new grant_categories item. */
  createItemsGrantCategories: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantCategories"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsGrantCategories"][]
          | components["schemas"]["ItemsGrantCategories"];
      };
    };
  };
  /** Retrieve a single grant_categories item by unique identifier. */
  readSingleItemsGrantCategories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing grant_categories item. */
  deleteSingleItemsGrantCategories: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing grant_categories item. */
  updateSingleItemsGrantCategories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantCategories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsGrantCategories"];
      };
    };
  };
  /** List the grants items. */
  readItemsGrants: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrants"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new grants item. */
  createItemsGrants: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrants"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsGrants"][]
          | components["schemas"]["ItemsGrants"];
      };
    };
  };
  /** Retrieve a single grants item by unique identifier. */
  readSingleItemsGrants: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrants"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing grants item. */
  deleteSingleItemsGrants: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing grants item. */
  updateSingleItemsGrants: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrants"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsGrants"];
      };
    };
  };
  /** List the languages items. */
  readItemsLanguages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new languages item. */
  createItemsLanguages: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsLanguages"][]
          | components["schemas"]["ItemsLanguages"];
      };
    };
  };
  /** Retrieve a single languages item by unique identifier. */
  readSingleItemsLanguages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing languages item. */
  deleteSingleItemsLanguages: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing languages item. */
  updateSingleItemsLanguages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsLanguages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsLanguages"];
      };
    };
  };
  /** List the pages items. */
  readItemsPages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new pages item. */
  createItemsPages: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsPages"][]
          | components["schemas"]["ItemsPages"];
      };
    };
  };
  /** Retrieve a single pages item by unique identifier. */
  readSingleItemsPages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing pages item. */
  deleteSingleItemsPages: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing pages item. */
  updateSingleItemsPages: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPages"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsPages"];
      };
    };
  };
  /** List the pages_content items. */
  readItemsPagesContent: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesContent"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new pages_content item. */
  createItemsPagesContent: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesContent"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsPagesContent"][]
          | components["schemas"]["ItemsPagesContent"];
      };
    };
  };
  /** Retrieve a single pages_content item by unique identifier. */
  readSingleItemsPagesContent: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesContent"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing pages_content item. */
  deleteSingleItemsPagesContent: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing pages_content item. */
  updateSingleItemsPagesContent: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesContent"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsPagesContent"];
      };
    };
  };
  /** List the pages_translations items. */
  readItemsPagesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new pages_translations item. */
  createItemsPagesTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsPagesTranslations"][]
          | components["schemas"]["ItemsPagesTranslations"];
      };
    };
  };
  /** Retrieve a single pages_translations item by unique identifier. */
  readSingleItemsPagesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing pages_translations item. */
  deleteSingleItemsPagesTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing pages_translations item. */
  updateSingleItemsPagesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPagesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsPagesTranslations"];
      };
    };
  };
  /** List the web3 items. */
  readItemsWeb3: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3 item. */
  createItemsWeb3: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3"][]
          | components["schemas"]["ItemsWeb3"];
      };
    };
  };
  /** Retrieve a single web3 item by unique identifier. */
  readSingleItemsWeb3: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3 item. */
  deleteSingleItemsWeb3: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3 item. */
  updateSingleItemsWeb3: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3"];
      };
    };
  };
  /** List the web3_blockchains items. */
  readItemsWeb3Blockchains: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Blockchains"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_blockchains item. */
  createItemsWeb3Blockchains: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Blockchains"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3Blockchains"][]
          | components["schemas"]["ItemsWeb3Blockchains"];
      };
    };
  };
  /** Retrieve a single web3_blockchains item by unique identifier. */
  readSingleItemsWeb3Blockchains: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Blockchains"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_blockchains item. */
  deleteSingleItemsWeb3Blockchains: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_blockchains item. */
  updateSingleItemsWeb3Blockchains: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Blockchains"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3Blockchains"];
      };
    };
  };
  /** List the web3_categories items. */
  readItemsWeb3Categories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Categories"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_categories item. */
  createItemsWeb3Categories: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Categories"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3Categories"][]
          | components["schemas"]["ItemsWeb3Categories"];
      };
    };
  };
  /** Retrieve a single web3_categories item by unique identifier. */
  readSingleItemsWeb3Categories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Categories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_categories item. */
  deleteSingleItemsWeb3Categories: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_categories item. */
  updateSingleItemsWeb3Categories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Categories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3Categories"];
      };
    };
  };
  /** List the web3_categories_translations items. */
  readItemsWeb3CategoriesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3CategoriesTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_categories_translations item. */
  createItemsWeb3CategoriesTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3CategoriesTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3CategoriesTranslations"][]
          | components["schemas"]["ItemsWeb3CategoriesTranslations"];
      };
    };
  };
  /** Retrieve a single web3_categories_translations item by unique identifier. */
  readSingleItemsWeb3CategoriesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3CategoriesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_categories_translations item. */
  deleteSingleItemsWeb3CategoriesTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_categories_translations item. */
  updateSingleItemsWeb3CategoriesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3CategoriesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3CategoriesTranslations"];
      };
    };
  };
  /** List the web3_grants items. */
  readItemsWeb3Grants: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Grants"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_grants item. */
  createItemsWeb3Grants: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Grants"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3Grants"][]
          | components["schemas"]["ItemsWeb3Grants"];
      };
    };
  };
  /** Retrieve a single web3_grants item by unique identifier. */
  readSingleItemsWeb3Grants: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Grants"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_grants item. */
  deleteSingleItemsWeb3Grants: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_grants item. */
  updateSingleItemsWeb3Grants: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Grants"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3Grants"];
      };
    };
  };
  /** List the web3_grants_translations items. */
  readItemsWeb3GrantsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_grants_translations item. */
  createItemsWeb3GrantsTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3GrantsTranslations"][]
          | components["schemas"]["ItemsWeb3GrantsTranslations"];
      };
    };
  };
  /** Retrieve a single web3_grants_translations item by unique identifier. */
  readSingleItemsWeb3GrantsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_grants_translations item. */
  deleteSingleItemsWeb3GrantsTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_grants_translations item. */
  updateSingleItemsWeb3GrantsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3GrantsTranslations"];
      };
    };
  };
  /** List the web3_grants_web3_blockchains items. */
  readItemsWeb3GrantsWeb3Blockchains: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3Blockchains"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_grants_web3_blockchains item. */
  createItemsWeb3GrantsWeb3Blockchains: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3Blockchains"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3GrantsWeb3Blockchains"][]
          | components["schemas"]["ItemsWeb3GrantsWeb3Blockchains"];
      };
    };
  };
  /** Retrieve a single web3_grants_web3_blockchains item by unique identifier. */
  readSingleItemsWeb3GrantsWeb3Blockchains: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3Blockchains"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_grants_web3_blockchains item. */
  deleteSingleItemsWeb3GrantsWeb3Blockchains: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_grants_web3_blockchains item. */
  updateSingleItemsWeb3GrantsWeb3Blockchains: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3Blockchains"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3GrantsWeb3Blockchains"];
      };
    };
  };
  /** List the web3_grants_web3_categories items. */
  readItemsWeb3GrantsWeb3Categories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3Categories"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_grants_web3_categories item. */
  createItemsWeb3GrantsWeb3Categories: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3Categories"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3GrantsWeb3Categories"][]
          | components["schemas"]["ItemsWeb3GrantsWeb3Categories"];
      };
    };
  };
  /** Retrieve a single web3_grants_web3_categories item by unique identifier. */
  readSingleItemsWeb3GrantsWeb3Categories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3Categories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_grants_web3_categories item. */
  deleteSingleItemsWeb3GrantsWeb3Categories: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_grants_web3_categories item. */
  updateSingleItemsWeb3GrantsWeb3Categories: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3Categories"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3GrantsWeb3Categories"];
      };
    };
  };
  /** List the web3_grants_web3_rfps items. */
  readItemsWeb3GrantsWeb3Rfps: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3Rfps"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_grants_web3_rfps item. */
  createItemsWeb3GrantsWeb3Rfps: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3Rfps"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3GrantsWeb3Rfps"][]
          | components["schemas"]["ItemsWeb3GrantsWeb3Rfps"];
      };
    };
  };
  /** Retrieve a single web3_grants_web3_rfps item by unique identifier. */
  readSingleItemsWeb3GrantsWeb3Rfps: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3Rfps"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_grants_web3_rfps item. */
  deleteSingleItemsWeb3GrantsWeb3Rfps: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_grants_web3_rfps item. */
  updateSingleItemsWeb3GrantsWeb3Rfps: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3Rfps"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3GrantsWeb3Rfps"];
      };
    };
  };
  /** List the web3_grants_web3_use_cases items. */
  readItemsWeb3GrantsWeb3UseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3UseCases"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_grants_web3_use_cases item. */
  createItemsWeb3GrantsWeb3UseCases: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3UseCases"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3GrantsWeb3UseCases"][]
          | components["schemas"]["ItemsWeb3GrantsWeb3UseCases"];
      };
    };
  };
  /** Retrieve a single web3_grants_web3_use_cases item by unique identifier. */
  readSingleItemsWeb3GrantsWeb3UseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3UseCases"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_grants_web3_use_cases item. */
  deleteSingleItemsWeb3GrantsWeb3UseCases: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_grants_web3_use_cases item. */
  updateSingleItemsWeb3GrantsWeb3UseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3GrantsWeb3UseCases"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3GrantsWeb3UseCases"];
      };
    };
  };
  /** List the web3_rfp_priorities items. */
  readItemsWeb3RfpPriorities: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpPriorities"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_rfp_priorities item. */
  createItemsWeb3RfpPriorities: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpPriorities"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3RfpPriorities"][]
          | components["schemas"]["ItemsWeb3RfpPriorities"];
      };
    };
  };
  /** Retrieve a single web3_rfp_priorities item by unique identifier. */
  readSingleItemsWeb3RfpPriorities: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpPriorities"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_rfp_priorities item. */
  deleteSingleItemsWeb3RfpPriorities: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_rfp_priorities item. */
  updateSingleItemsWeb3RfpPriorities: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpPriorities"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3RfpPriorities"];
      };
    };
  };
  /** List the web3_rfp_priorities_translations items. */
  readItemsWeb3RfpPrioritiesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpPrioritiesTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_rfp_priorities_translations item. */
  createItemsWeb3RfpPrioritiesTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpPrioritiesTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3RfpPrioritiesTranslations"][]
          | components["schemas"]["ItemsWeb3RfpPrioritiesTranslations"];
      };
    };
  };
  /** Retrieve a single web3_rfp_priorities_translations item by unique identifier. */
  readSingleItemsWeb3RfpPrioritiesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpPrioritiesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_rfp_priorities_translations item. */
  deleteSingleItemsWeb3RfpPrioritiesTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_rfp_priorities_translations item. */
  updateSingleItemsWeb3RfpPrioritiesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpPrioritiesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3RfpPrioritiesTranslations"];
      };
    };
  };
  /** List the web3_rfp_statuses items. */
  readItemsWeb3RfpStatuses: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpStatuses"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_rfp_statuses item. */
  createItemsWeb3RfpStatuses: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpStatuses"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3RfpStatuses"][]
          | components["schemas"]["ItemsWeb3RfpStatuses"];
      };
    };
  };
  /** Retrieve a single web3_rfp_statuses item by unique identifier. */
  readSingleItemsWeb3RfpStatuses: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpStatuses"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_rfp_statuses item. */
  deleteSingleItemsWeb3RfpStatuses: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_rfp_statuses item. */
  updateSingleItemsWeb3RfpStatuses: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpStatuses"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3RfpStatuses"];
      };
    };
  };
  /** List the web3_rfp_statuses_translations items. */
  readItemsWeb3RfpStatusesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpStatusesTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_rfp_statuses_translations item. */
  createItemsWeb3RfpStatusesTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpStatusesTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3RfpStatusesTranslations"][]
          | components["schemas"]["ItemsWeb3RfpStatusesTranslations"];
      };
    };
  };
  /** Retrieve a single web3_rfp_statuses_translations item by unique identifier. */
  readSingleItemsWeb3RfpStatusesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpStatusesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_rfp_statuses_translations item. */
  deleteSingleItemsWeb3RfpStatusesTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_rfp_statuses_translations item. */
  updateSingleItemsWeb3RfpStatusesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpStatusesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3RfpStatusesTranslations"];
      };
    };
  };
  /** List the web3_rfps items. */
  readItemsWeb3Rfps: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Rfps"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_rfps item. */
  createItemsWeb3Rfps: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Rfps"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3Rfps"][]
          | components["schemas"]["ItemsWeb3Rfps"];
      };
    };
  };
  /** Retrieve a single web3_rfps item by unique identifier. */
  readSingleItemsWeb3Rfps: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Rfps"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_rfps item. */
  deleteSingleItemsWeb3Rfps: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_rfps item. */
  updateSingleItemsWeb3Rfps: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3Rfps"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3Rfps"];
      };
    };
  };
  /** List the web3_rfps_translations items. */
  readItemsWeb3RfpsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpsTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_rfps_translations item. */
  createItemsWeb3RfpsTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpsTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3RfpsTranslations"][]
          | components["schemas"]["ItemsWeb3RfpsTranslations"];
      };
    };
  };
  /** Retrieve a single web3_rfps_translations item by unique identifier. */
  readSingleItemsWeb3RfpsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_rfps_translations item. */
  deleteSingleItemsWeb3RfpsTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_rfps_translations item. */
  updateSingleItemsWeb3RfpsTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3RfpsTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3RfpsTranslations"];
      };
    };
  };
  /** List the web3_use_cases items. */
  readItemsWeb3UseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3UseCases"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_use_cases item. */
  createItemsWeb3UseCases: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3UseCases"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3UseCases"][]
          | components["schemas"]["ItemsWeb3UseCases"];
      };
    };
  };
  /** Retrieve a single web3_use_cases item by unique identifier. */
  readSingleItemsWeb3UseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3UseCases"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_use_cases item. */
  deleteSingleItemsWeb3UseCases: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_use_cases item. */
  updateSingleItemsWeb3UseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3UseCases"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3UseCases"];
      };
    };
  };
  /** List the web3_use_cases_translations items. */
  readItemsWeb3UseCasesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3UseCasesTranslations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new web3_use_cases_translations item. */
  createItemsWeb3UseCasesTranslations: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3UseCasesTranslations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsWeb3UseCasesTranslations"][]
          | components["schemas"]["ItemsWeb3UseCasesTranslations"];
      };
    };
  };
  /** Retrieve a single web3_use_cases_translations item by unique identifier. */
  readSingleItemsWeb3UseCasesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3UseCasesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing web3_use_cases_translations item. */
  deleteSingleItemsWeb3UseCasesTranslations: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing web3_use_cases_translations item. */
  updateSingleItemsWeb3UseCasesTranslations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsWeb3UseCasesTranslations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsWeb3UseCasesTranslations"];
      };
    };
  };
  /** Returns a list of activity actions. */
  getActivities: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Creates a new comment. */
  createComment: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          collection: string;
          item: number;
          comment: string;
        };
      };
    };
  };
  /** Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information. */
  getActivity: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing comment. Deleted comments can not be retrieved. */
  deleteComment: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** Deleted successfully */
      203: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update the content of an existing comment. */
  updateComment: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          comment?: string;
        };
      };
    };
  };
  /** Returns a list of the collections available in the project. */
  getCollections: {
    parameters: {
      query: {
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new collection in Directus. */
  createCollection: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Unique name of the collection. */
          collection: string;
          /** The fields contained in this collection. See the fields reference for more information. Each individual field requires field, type, and interface to be provided. */
          fields: { [key: string]: any }[];
          /** Name of a Google Material Design Icon that's assigned to this collection. */
          icon?: string | null;
          /** A note describing the collection. */
          note?: string | null;
          /** Text representation of how items from this collection are shown across the system. */
          display_template?: string | null;
          /** Whether or not the collection is hidden from the navigation in the admin app. */
          hidden?: boolean;
          /** Whether or not the collection is treated as a single object. */
          singleton?: boolean;
          /** Key value pairs of how to show this collection's name in different languages in the admin app. */
          translation?: string | null;
          /** What field holds the archive value. */
          archive_field?: string | null;
          /** What value to use for "archived" items. */
          archive_app_filter?: string | null;
          /** What value to use to "unarchive" items. */
          archive_value?: string | null;
          /** Whether or not to show the "archived" filter. */
          unarchive_value?: string | null;
          /** The sort field in the collection. */
          sort_field?: string | null;
        };
      };
    };
  };
  /** Retrieves the details of a single collection. */
  getCollection: {
    parameters: {
      path: {
        /** Unique identifier of the collection. */
        id: string;
      };
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing collection. Warning: This will delete the whole collection, including the items within. Proceed with caution. */
  deleteCollection: {
    parameters: {
      path: {
        /** Unique identifier of the collection. */
        id: string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing collection. */
  updateCollection: {
    parameters: {
      path: {
        /** Unique identifier of the collection. */
        id: string;
      };
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Metadata of the collection. */
          meta?: {
            /** Name of a Google Material Design Icon that's assigned to this collection. */
            icon?: string | null;
            /** Choose the color for the icon assigned to this collection. */
            color?: string | null;
            /** A note describing the collection. */
            note?: string | null;
            /** Text representation of how items from this collection are shown across the system. */
            display_template?: string | null;
            /** Whether or not the collection is hidden from the navigation in the admin app. */
            hidden?: boolean;
            /** Whether or not the collection is treated as a single object. */
            singleton?: boolean;
            /** Key value pairs of how to show this collection's name in different languages in the admin app. */
            translation?: string | null;
            /** What field holds the archive value. */
            archive_field?: string | null;
            /** What value to use for "archived" items. */
            archive_app_filter?: string | null;
            /** What value to use to "unarchive" items. */
            archive_value?: string | null;
            /** Whether or not to show the "archived" filter. */
            unarchive_value?: string | null;
            /** The sort field in the collection. */
            sort_field?: string | null;
          };
        };
      };
    };
  };
  /** Returns a list of the fields available in the project. */
  getFields: {
    parameters: {
      query: {
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Returns a list of the fields available in the given collection. */
  getCollectionFields: {
    parameters: {
      path: {
        /** Unique identifier of the collection the item resides in. */
        collection: string;
      };
      query: {
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new field in a given collection. */
  createField: {
    parameters: {
      path: {
        /** Unique identifier of the collection the item resides in. */
        collection: string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Unique name of the field. Field name is unique within the collection. */
          field: string;
          /** Directus specific data type. Used to cast values in the API. */
          type: string;
          /** The schema info. */
          schema?: {
            /** The name of the field. */
            name?: string;
            /** The collection of the field. */
            table?: string;
            /** The type of the field. */
            type?: string;
            /** The default value of the field. */
            default_value?: string | null;
            /** The max length of the field. */
            max_length?: number | null;
            /** If the field is nullable. */
            is_nullable?: boolean;
            /** If the field is primary key. */
            is_primary_key?: boolean;
            /** If the field has auto increment. */
            has_auto_increment?: boolean;
            /** Related column from the foreign key constraint. */
            foreign_key_column?: string | null;
            /** Related table from the foreign key constraint. */
            foreign_key_table?: string | null;
            /** Comment as saved in the database. */
            comment?: string | null;
            /** Database schema (pg only). */
            schema?: string;
            /** Related schema from the foreign key constraint (pg only). */
            foreign_key_schema?: string | null;
          };
          /** The meta info. */
          meta?: {
            /** Unique identifier for the field in the `directus_fields` collection. */
            id?: number;
            /** Unique name of the collection this field is in. */
            collection?: string;
            /** Unique name of the field. Field name is unique within the collection. */
            field?: string;
            /** Transformation flag for field */
            special?: string[] | null;
            /** What interface is used in the admin app to edit the value for this field. */
            "system-interface"?: string | null;
            /** Options for the interface that's used. This format is based on the individual interface. */
            options?: { [key: string]: any } | null;
            /** What display is used in the admin app to display the value for this field. */
            display?: string | null;
            /** Options for the display that's used. This format is based on the individual display. */
            display_options?: { [key: string]: any } | null;
            /** If the field can be altered by the end user. Directus system fields have this value set to `true`. */
            locked?: boolean;
            /** Prevents the user from editing the value in the field. */
            readonly?: boolean;
            /** If this field should be hidden. */
            hidden?: boolean;
            /** Sort order of this field on the edit page of the admin app. */
            sort?: number | null;
            /** Width of the field on the edit form. */
            width?:
              | ("half" | "half-left" | "half-right" | "full" | "fill")
              | null;
            /** What field group this field is part of. */
            group?: number | null;
            /** Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app. */
            translation?: { [key: string]: any } | null;
            /** A user provided note for the field. Will be rendered alongside the interface on the edit page. */
            note?: string | null;
          } | null;
        };
      };
    };
  };
  /** Retrieves the details of a single field in a given collection. */
  getCollectionField: {
    parameters: {
      path: {
        /** Unique identifier of the collection the item resides in. */
        collection: string;
        /** Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing field. */
  deleteField: {
    parameters: {
      path: {
        /** Unique identifier of the collection the item resides in. */
        collection: string;
        /** Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing field. */
  updateField: {
    parameters: {
      path: {
        /** Unique identifier of the collection the item resides in. */
        collection: string;
        /** Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Unique name of the field. Field name is unique within the collection. */
          field?: string;
          /** Directus specific data type. Used to cast values in the API. */
          type?: string;
          /** The schema info. */
          schema?: {
            /** The name of the field. */
            name?: string;
            /** The collection of the field. */
            table?: string;
            /** The type of the field. */
            type?: string;
            /** The default value of the field. */
            default_value?: string | null;
            /** The max length of the field. */
            max_length?: number | null;
            /** If the field is nullable. */
            is_nullable?: boolean;
            /** If the field is primary key. */
            is_primary_key?: boolean;
            /** If the field has auto increment. */
            has_auto_increment?: boolean;
            /** Related column from the foreign key constraint. */
            foreign_key_column?: string | null;
            /** Related table from the foreign key constraint. */
            foreign_key_table?: string | null;
            /** Comment as saved in the database. */
            comment?: string | null;
            /** Database schema (pg only). */
            schema?: string;
            /** Related schema from the foreign key constraint (pg only). */
            foreign_key_schema?: string | null;
          };
          /** The meta info. */
          meta?: {
            /** Unique identifier for the field in the `directus_fields` collection. */
            id?: number;
            /** Unique name of the collection this field is in. */
            collection?: string;
            /** Unique name of the field. Field name is unique within the collection. */
            field?: string;
            /** Transformation flag for field */
            special?: string[] | null;
            /** What interface is used in the admin app to edit the value for this field. */
            "system-interface"?: string | null;
            /** Options for the interface that's used. This format is based on the individual interface. */
            options?: { [key: string]: any } | null;
            /** What display is used in the admin app to display the value for this field. */
            display?: string | null;
            /** Options for the display that's used. This format is based on the individual display. */
            display_options?: { [key: string]: any } | null;
            /** If the field can be altered by the end user. Directus system fields have this value set to `true`. */
            locked?: boolean;
            /** Prevents the user from editing the value in the field. */
            readonly?: boolean;
            /** If this field should be hidden. */
            hidden?: boolean;
            /** Sort order of this field on the edit page of the admin app. */
            sort?: number | null;
            /** Width of the field on the edit form. */
            width?:
              | ("half" | "half-left" | "half-right" | "full" | "fill")
              | null;
            /** What field group this field is part of. */
            group?: number | null;
            /** Key value pair of `<language>: <translation>` that allows the user to change the displayed name of the field in the admin app. */
            translation?: { [key: string]: any } | null;
            /** A user provided note for the field. Will be rendered alongside the interface on the edit page. */
            note?: string | null;
          } | null;
        };
      };
    };
  };
  /** List the files. */
  getFiles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new file */
  createFile: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          data?: string;
        };
      };
    };
  };
  /** Retrieve a single file by unique identifier. */
  getFile: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Delete an existing file. */
  deleteFile: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Update an existing file, and/or replace it's file contents. */
  updateFile: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "multipart/data": {
          /** Title for the file. Is extracted from the filename on upload, but can be edited by the user. */
          title?: string;
          /** Preferred filename when file is downloaded. */
          filename_download?: string;
          /** Description for the file. */
          description?: string | null;
          /** Virtual folder where this file resides in. */
          folder?: (string | components["schemas"]["Folders"]) | null;
          /** Tags for the file. Is automatically populated based on EXIF data for images. */
          tags?: string[] | null;
          /** File contents. */
          file: { [key: string]: any };
        };
        "application/json": {
          /** Title for the file. Is extracted from the filename on upload, but can be edited by the user. */
          title?: string;
          /** Preferred filename when file is downloaded. */
          filename_download?: string;
          /** Description for the file. */
          description?: string | null;
          /** Virtual folder where this file resides in. */
          folder?: (string | components["schemas"]["Folders"]) | null;
          /** Tags for the file. Is automatically populated based on EXIF data for images. */
          tags?: string[] | null;
        };
      };
    };
  };
  /** List the folders. */
  getFolders: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new folder. */
  createFolder: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Name of the folder. */
          name: string;
          /** Unique identifier of the parent folder. This allows for nested folders. */
          parent?: number;
        };
      };
    };
  };
  /** Retrieve a single folder by unique identifier. */
  getFolder: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing folder */
  deleteFolder: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing folder */
  updateFolder: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Name of the folder. Can't be null or empty. */
          name?: string;
          /** Unique identifier of the parent folder. This allows for nested folders. */
          parent?: number;
        };
      };
    };
  };
  /** List all permissions. */
  getPermissions: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new permission. */
  createPermission: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** What collection this permission applies to. */
          collection?: string;
          /** If the user can post comments. */
          comment?: "none" | "create" | "update" | "full";
          /** If the user can create items. */
          create?: "none" | "full";
          /** If the user can update items. */
          delete?: "none" | "mine" | "role" | "full";
          /** If the user is required to leave a comment explaining what was changed. */
          explain?: "none" | "create" | "update" | "always";
          /** If the user can read items. */
          read?: "none" | "mine" | "role" | "full";
          /** Unique identifier of the role this permission applies to. */
          role?: number;
          /** Explicitly denies read access for specific fields. */
          read_field_blacklist?: string[];
          /** What status this permission applies to. */
          status?: string;
          /** Explicitly denies specific statuses to be used. */
          status_blacklist?: string[];
          /** If the user can update items. */
          update?: "none" | "mine" | "role" | "full";
          /** Explicitly denies write access for specific fields. */
          write_field_blacklist?: string[];
        };
      };
    };
  };
  /** List the permissions that apply to the current user. */
  getMyPermissions: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a single permissions object by unique identifier. */
  getPermission: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing permission */
  deletePermission: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing permission */
  updatePermission: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** What collection this permission applies to. */
          collection?: { [key: string]: any };
          /** If the user can post comments. `full`. */
          comment?: "none" | "create" | "update";
          /** If the user can create items. */
          create?: "none" | "full";
          /** If the user can update items. */
          delete?: "none" | "mine" | "role" | "full";
          /** If the user is required to leave a comment explaining what was changed. */
          explain?: "none" | "create" | "update" | "always";
          /** If the user can read items. */
          read?: "none" | "mine" | "role" | "full";
          /** Explicitly denies read access for specific fields. */
          read_field_blacklist?: { [key: string]: any };
          /** Unique identifier of the role this permission applies to. */
          role?: { [key: string]: any };
          /** What status this permission applies to. */
          status?: { [key: string]: any };
          /** Explicitly denies specific statuses to be used. */
          status_blacklist?: { [key: string]: any };
          /** If the user can update items. */
          update?: "none" | "mine" | "role" | "full";
          /** Explicitly denies write access for specific fields. */
          write_field_blacklist?: { [key: string]: any };
        };
      };
    };
  };
  /** List the presets. */
  getPresets: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new preset. */
  createPreset: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** What collection this collection preset is used for. */
          collection: string;
          /** Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark. */
          title?: string;
          /** The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role. */
          role?: string;
          /** What the user searched for in search/filter in the header bar. */
          search?: string;
          filters?: {
            key?: string;
            field?: string;
            operator?: string;
            value?: number;
          }[];
          /** Name of the view type that is used. */
          layout?: string;
          /** Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
          layout_query?: string;
          /** Options of the views. The properties in here are controlled by the layout. */
          layout_options?: string;
        };
      };
    };
  };
  /** Retrieve a single preset by unique identifier. */
  getPreset: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Delete an existing preset. */
  deletePreset: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Update an existing preset. */
  updatePreset: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** What collection this collection preset is used for. */
          collection: string;
          /** Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark. */
          title?: string;
          /** The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role. */
          role?: number;
          /** What the user searched for in search/filter in the header bar. */
          search_query?: string;
          filters?: {
            field?: string;
            operator?: string;
            value?: number;
          }[];
          /** Name of the view type that is used. Defaults to tabular. */
          view_type?: string;
          /** View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
          view_query?: string;
          /** Options of the views. The properties in here are controlled by the layout. */
          view_options?: string;
          /** Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages. */
          translation?: { [key: string]: any };
        };
      };
    };
  };
  /** List the relations. */
  getRelations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new relation. */
  createRelation: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Collection that has the field that holds the foreign key. */
          collection_many?: string;
          /** Collection on the _one_ side of the relationship. */
          collection_one?: string;
          /** Foreign key. Field that holds the primary key of the related collection. */
          field_many?: string;
          /** Alias column that serves as the _one_ side of the relationship. */
          field_one?: string;
          /** Field on the junction table that holds the primary key of the related collection. */
          junction_field?: string;
        };
      };
    };
  };
  /** Retrieve a single relation by unique identifier. */
  getRelation: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing relation. */
  deleteRelation: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing relation */
  updateRelation: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Collection that has the field that holds the foreign key. */
          collection_many?: string;
          /** Collection on the _one_ side of the relationship. */
          collection_one?: string;
          /** Foreign key. Field that holds the primary key of the related collection. */
          field_many?: string;
          /** Alias column that serves as the _one_ side of the relationship. */
          field_one?: string;
          /** Field on the junction table that holds the primary key of the related collection. */
          junction_field?: string;
        };
      };
    };
  };
  /** List the revisions. */
  getRevisions: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Revisions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a single revision by unique identifier. */
  getRevision: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Revisions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List the roles. */
  getRoles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new role. */
  createRole: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Description of the role. */
          description?: string;
          /** Whether or not this role enforces the use of 2FA. */
          enforce_tfa?: boolean;
          /** ID used with external services in SCIM. */
          external_id?: string;
          /** Array of IP addresses that are allowed to connect to the API as a user of this role. */
          ip_whitelist?: string[];
          /** Custom override for the admin app module bar navigation. */
          module_listing?: string;
          /** Name of the role. */
          name?: string;
        };
      };
    };
  };
  /** Retrieve a single role by unique identifier. */
  getRole: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing role */
  deleteRole: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing role */
  updateRole: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Description of the role. */
          description?: string;
          /** Whether or not this role enforces the use of 2FA. */
          enforce_tfa?: boolean;
          /** ID used with external services in SCIM. */
          external_id?: string;
          /** Array of IP addresses that are allowed to connect to the API as a user of this role. */
          ip_whitelist?: string[];
          /** Custom override for the admin app module bar navigation. */
          module_listing?: string;
          /** Name of the role. */
          name?: string;
        };
      };
    };
  };
  /** List the settings. */
  getSettings: {
    parameters: {
      query: {
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Settings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update the settings */
  updateSetting: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Settings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": { [key: string]: any };
      };
    };
  };
  /** List the users. */
  getUsers: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new user. */
  createUser: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Users"];
      };
    };
  };
  /** Retrieve a single user by unique identifier. */
  getUser: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing user */
  deleteUser: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing user */
  updateUser: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: any };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Users"];
      };
    };
  };
  /** Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account. */
  invite: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Email address or array of email addresses of the to-be-invited user(s). */
          email?: string;
        };
      };
    };
  };
  /** Accepts and enables an invited user using a JWT invitation token. */
  acceptInvite: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Accept invite token. */
          token?: string;
          /** Password of the user. */
          password?: string;
        };
      };
    };
  };
  /** Retrieve the currently authenticated user. */
  getMe: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update the currently authenticated user. */
  updateMe: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used. */
  updateLastUsedPageMe: {
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Path of the page you used last. */
          last_page?: string;
        };
      };
    };
  };
  /** Enables two-factor authentication for the currently authenticated user. */
  meTfaEnable: {
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Disables two-factor authentication for the currently authenticated user. */
  meTfaDisable: {
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Get all webhooks. */
  getWebhooks: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new webhook. */
  createWebhook: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** The name of the webhook. */
          name?: string;
          /** Method used in the webhook. */
          method?: string;
          /** The url of the webhook. */
          url?: string;
          /** The status of the webhook. */
          status?: string;
          /** If yes, send the content of what was done */
          data?: boolean;
          /** The actions that triggers this webhook. */
          actions?: { [key: string]: any };
          /** The collections that triggers this webhook. */
          "system-collections"?: { [key: string]: any };
        };
      };
    };
  };
  /** Retrieve a single webhook by unique identifier. */
  getWebhook: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Webhooks"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing webhook */
  deleteWebhook: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing webhook */
  updateWebhook: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** The name of the webhook. */
          name?: string;
          /** Method used in the webhook. */
          method?: string;
          /** The url of the webhook. */
          url?: string;
          /** The status of the webhook. */
          status?: string;
          /** If yes, send the content of what was done */
          data?: boolean;
          /** The actions that triggers this webhook. */
          actions?: { [key: string]: any };
          /** The collections that triggers this webhook. */
          "system-collections"?: { [key: string]: any };
        };
      };
    };
  };
  /** Get all flows. */
  getFlows: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new flow. */
  createFlow: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": Partial<components["schemas"]["Flows"]>;
      };
    };
  };
  /** Retrieve a single flow by unique identifier. */
  getFlow: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing flow */
  deleteFlow: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing flow */
  updateFlow: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": Partial<components["schemas"]["Flows"]>;
      };
    };
  };
  /** Get all operations. */
  getOperations: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new operation. */
  createOperation: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": Partial<components["schemas"]["Operations"]>;
      };
    };
  };
  /** Retrieve a single operation by unique identifier. */
  getOperation: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing operation */
  deleteOperation: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing operation */
  updateOperation: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Operations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": Partial<components["schemas"]["Operations"]>;
      };
    };
  };
  /** List the grant_project_payments items. */
  readItemsGrantProjectPayments: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantProjectPayments"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new grant_project_payments item. */
  createItemsGrantProjectPayments: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantProjectPayments"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsGrantProjectPayments"][]
          | components["schemas"]["ItemsGrantProjectPayments"];
      };
    };
  };
  /** Retrieve a single grant_project_payments item by unique identifier. */
  readSingleItemsGrantProjectPayments: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantProjectPayments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing grant_project_payments item. */
  deleteSingleItemsGrantProjectPayments: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing grant_project_payments item. */
  updateSingleItemsGrantProjectPayments: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantProjectPayments"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsGrantProjectPayments"];
      };
    };
  };
  /** List the grant_projects items. */
  readItemsGrantProjects: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantProjects"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new grant_projects item. */
  createItemsGrantProjects: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantProjects"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsGrantProjects"][]
          | components["schemas"]["ItemsGrantProjects"];
      };
    };
  };
  /** Retrieve a single grant_projects item by unique identifier. */
  readSingleItemsGrantProjects: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantProjects"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing grant_projects item. */
  deleteSingleItemsGrantProjects: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing grant_projects item. */
  updateSingleItemsGrantProjects: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantProjects"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsGrantProjects"];
      };
    };
  };
  /** List the grant_rfps items. */
  readItemsGrantRfps: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantRfps"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new grant_rfps item. */
  createItemsGrantRfps: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantRfps"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsGrantRfps"][]
          | components["schemas"]["ItemsGrantRfps"];
      };
    };
  };
  /** Retrieve a single grant_rfps item by unique identifier. */
  readSingleItemsGrantRfps: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantRfps"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing grant_rfps item. */
  deleteSingleItemsGrantRfps: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing grant_rfps item. */
  updateSingleItemsGrantRfps: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantRfps"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsGrantRfps"];
      };
    };
  };
  /** List the grant_use_cases items. */
  readItemsGrantUseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantUseCases"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new grant_use_cases item. */
  createItemsGrantUseCases: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantUseCases"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsGrantUseCases"][]
          | components["schemas"]["ItemsGrantUseCases"];
      };
    };
  };
  /** Retrieve a single grant_use_cases item by unique identifier. */
  readSingleItemsGrantUseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantUseCases"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing grant_use_cases item. */
  deleteSingleItemsGrantUseCases: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing grant_use_cases item. */
  updateSingleItemsGrantUseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsGrantUseCases"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsGrantUseCases"];
      };
    };
  };
  /** List the nc_evolutions items. */
  readItemsNcEvolutions: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNcEvolutions"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new nc_evolutions item. */
  createItemsNcEvolutions: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNcEvolutions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsNcEvolutions"][]
          | components["schemas"]["ItemsNcEvolutions"];
      };
    };
  };
  /** Retrieve a single nc_evolutions item by unique identifier. */
  readSingleItemsNcEvolutions: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNcEvolutions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing nc_evolutions item. */
  deleteSingleItemsNcEvolutions: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing nc_evolutions item. */
  updateSingleItemsNcEvolutions: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsNcEvolutions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsNcEvolutions"];
      };
    };
  };
  /** List the posts items. */
  readItemsPosts: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPosts"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new posts item. */
  createItemsPosts: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPosts"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsPosts"][]
          | components["schemas"]["ItemsPosts"];
      };
    };
  };
  /** Retrieve a single posts item by unique identifier. */
  readSingleItemsPosts: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPosts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing posts item. */
  deleteSingleItemsPosts: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing posts item. */
  updateSingleItemsPosts: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsPosts"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsPosts"];
      };
    };
  };
  /** List the project_use_cases items. */
  readItemsProjectUseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProjectUseCases"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new project_use_cases item. */
  createItemsProjectUseCases: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProjectUseCases"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsProjectUseCases"][]
          | components["schemas"]["ItemsProjectUseCases"];
      };
    };
  };
  /** Retrieve a single project_use_cases item by unique identifier. */
  readSingleItemsProjectUseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProjectUseCases"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing project_use_cases item. */
  deleteSingleItemsProjectUseCases: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing project_use_cases item. */
  updateSingleItemsProjectUseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProjectUseCases"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsProjectUseCases"];
      };
    };
  };
  /** List the projects items. */
  readItemsProjects: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProjects"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new projects item. */
  createItemsProjects: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProjects"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsProjects"][]
          | components["schemas"]["ItemsProjects"];
      };
    };
  };
  /** Retrieve a single projects item by unique identifier. */
  readSingleItemsProjects: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProjects"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing projects item. */
  deleteSingleItemsProjects: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing projects item. */
  updateSingleItemsProjects: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProjects"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsProjects"];
      };
    };
  };
  /** List the providers items. */
  readItemsProviders: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProviders"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new providers item. */
  createItemsProviders: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProviders"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsProviders"][]
          | components["schemas"]["ItemsProviders"];
      };
    };
  };
  /** Retrieve a single providers item by unique identifier. */
  readSingleItemsProviders: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProviders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing providers item. */
  deleteSingleItemsProviders: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing providers item. */
  updateSingleItemsProviders: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProviders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsProviders"];
      };
    };
  };
  /** List the queries items. */
  readItemsQueries: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQueries"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new queries item. */
  createItemsQueries: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQueries"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsQueries"][]
          | components["schemas"]["ItemsQueries"];
      };
    };
  };
  /** Retrieve a single queries item by unique identifier. */
  readSingleItemsQueries: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQueries"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing queries item. */
  deleteSingleItemsQueries: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing queries item. */
  updateSingleItemsQueries: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsQueries"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsQueries"];
      };
    };
  };
  /** List the replies items. */
  readItemsReplies: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsReplies"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new replies item. */
  createItemsReplies: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsReplies"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsReplies"][]
          | components["schemas"]["ItemsReplies"];
      };
    };
  };
  /** Retrieve a single replies item by unique identifier. */
  readSingleItemsReplies: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsReplies"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing replies item. */
  deleteSingleItemsReplies: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing replies item. */
  updateSingleItemsReplies: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsReplies"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsReplies"];
      };
    };
  };
  /** List the rfp_priorities items. */
  readItemsRfpPriorities: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfpPriorities"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new rfp_priorities item. */
  createItemsRfpPriorities: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfpPriorities"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsRfpPriorities"][]
          | components["schemas"]["ItemsRfpPriorities"];
      };
    };
  };
  /** Retrieve a single rfp_priorities item by unique identifier. */
  readSingleItemsRfpPriorities: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfpPriorities"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing rfp_priorities item. */
  deleteSingleItemsRfpPriorities: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing rfp_priorities item. */
  updateSingleItemsRfpPriorities: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfpPriorities"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsRfpPriorities"];
      };
    };
  };
  /** List the rfp_statuses items. */
  readItemsRfpStatuses: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfpStatuses"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new rfp_statuses item. */
  createItemsRfpStatuses: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfpStatuses"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsRfpStatuses"][]
          | components["schemas"]["ItemsRfpStatuses"];
      };
    };
  };
  /** Retrieve a single rfp_statuses item by unique identifier. */
  readSingleItemsRfpStatuses: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfpStatuses"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing rfp_statuses item. */
  deleteSingleItemsRfpStatuses: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing rfp_statuses item. */
  updateSingleItemsRfpStatuses: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfpStatuses"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsRfpStatuses"];
      };
    };
  };
  /** List the rfp_use_cases items. */
  readItemsRfpUseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfpUseCases"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new rfp_use_cases item. */
  createItemsRfpUseCases: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfpUseCases"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsRfpUseCases"][]
          | components["schemas"]["ItemsRfpUseCases"];
      };
    };
  };
  /** Retrieve a single rfp_use_cases item by unique identifier. */
  readSingleItemsRfpUseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfpUseCases"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing rfp_use_cases item. */
  deleteSingleItemsRfpUseCases: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing rfp_use_cases item. */
  updateSingleItemsRfpUseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfpUseCases"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsRfpUseCases"];
      };
    };
  };
  /** List the rfps items. */
  readItemsRfps: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfps"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new rfps item. */
  createItemsRfps: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfps"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsRfps"][]
          | components["schemas"]["ItemsRfps"];
      };
    };
  };
  /** Retrieve a single rfps item by unique identifier. */
  readSingleItemsRfps: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfps"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing rfps item. */
  deleteSingleItemsRfps: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing rfps item. */
  updateSingleItemsRfps: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsRfps"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsRfps"];
      };
    };
  };
  /** List the use_cases items. */
  readItemsUseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUseCases"][];
            meta?: components["schemas"]["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new use_cases item. */
  createItemsUseCases: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUseCases"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ItemsUseCases"][]
          | components["schemas"]["ItemsUseCases"];
      };
    };
  };
  /** Retrieve a single use_cases item by unique identifier. */
  readSingleItemsUseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUseCases"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing use_cases item. */
  deleteSingleItemsUseCases: {
    parameters: {
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing use_cases item. */
  updateSingleItemsUseCases: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsUseCases"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemsUseCases"];
      };
    };
  };
}

export type DirectusCollections = {
  authors: components["schemas"]["ItemsAuthors"];
  block_button: components["schemas"]["ItemsBlockButton"];
  block_button_translations: components["schemas"]["ItemsBlockButtonTranslations"];
  block_cal: components["schemas"]["ItemsBlockCal"];
  block_cal_title: components["schemas"]["ItemsBlockCalTitle"];
  block_external_link: components["schemas"]["ItemsBlockExternalLink"];
  block_external_link_translations: components["schemas"]["ItemsBlockExternalLinkTranslations"];
  block_features: components["schemas"]["ItemsBlockFeatures"];
  block_features_translations: components["schemas"]["ItemsBlockFeaturesTranslations"];
  block_hero: components["schemas"]["ItemsBlockHero"];
  block_hero_buttons: components["schemas"]["ItemsBlockHeroButtons"];
  block_hero_translations: components["schemas"]["ItemsBlockHeroTranslations"];
  block_logo_cloud: components["schemas"]["ItemsBlockLogoCloud"];
  block_logo_cloud_files: components["schemas"]["ItemsBlockLogoCloudFiles"];
  block_logo_cloud_translations: components["schemas"]["ItemsBlockLogoCloudTranslations"];
  block_page_link: components["schemas"]["ItemsBlockPageLink"];
  block_title: components["schemas"]["ItemsBlockTitle"];
  block_title_translations: components["schemas"]["ItemsBlockTitleTranslations"];
  blockchains: components["schemas"]["ItemsBlockchains"];
  blocks: components["schemas"]["ItemsBlocks"];
  categories: components["schemas"]["ItemsCategories"];
  currencies: components["schemas"]["ItemsCurrencies"];
  fiats: components["schemas"]["ItemsFiats"];
  followers: components["schemas"]["ItemsFollowers"];
  grant_blockchains: components["schemas"]["ItemsGrantBlockchains"];
  grant_categories: components["schemas"]["ItemsGrantCategories"];
  grants: components["schemas"]["ItemsGrants"];
  languages: components["schemas"]["ItemsLanguages"];
  pages: components["schemas"]["ItemsPages"];
  pages_content: components["schemas"]["ItemsPagesContent"];
  pages_translations: components["schemas"]["ItemsPagesTranslations"];
  web3: components["schemas"]["ItemsWeb3"];
  web3_blockchains: components["schemas"]["ItemsWeb3Blockchains"];
  web3_categories: components["schemas"]["ItemsWeb3Categories"];
  web3_categories_translations: components["schemas"]["ItemsWeb3CategoriesTranslations"];
  web3_grants: components["schemas"]["ItemsWeb3Grants"];
  web3_grants_translations: components["schemas"]["ItemsWeb3GrantsTranslations"];
  web3_grants_web3_blockchains: components["schemas"]["ItemsWeb3GrantsWeb3Blockchains"];
  web3_grants_web3_categories: components["schemas"]["ItemsWeb3GrantsWeb3Categories"];
  web3_grants_web3_rfps: components["schemas"]["ItemsWeb3GrantsWeb3Rfps"];
  web3_grants_web3_use_cases: components["schemas"]["ItemsWeb3GrantsWeb3UseCases"];
  web3_rfp_priorities: components["schemas"]["ItemsWeb3RfpPriorities"];
  web3_rfp_priorities_translations: components["schemas"]["ItemsWeb3RfpPrioritiesTranslations"];
  web3_rfp_statuses: components["schemas"]["ItemsWeb3RfpStatuses"];
  web3_rfp_statuses_translations: components["schemas"]["ItemsWeb3RfpStatusesTranslations"];
  web3_rfps: components["schemas"]["ItemsWeb3Rfps"];
  web3_rfps_translations: components["schemas"]["ItemsWeb3RfpsTranslations"];
  web3_use_cases: components["schemas"]["ItemsWeb3UseCases"];
  web3_use_cases_translations: components["schemas"]["ItemsWeb3UseCasesTranslations"];
  grant_project_payments: components["schemas"]["ItemsGrantProjectPayments"];
  grant_projects: components["schemas"]["ItemsGrantProjects"];
  grant_rfps: components["schemas"]["ItemsGrantRfps"];
  grant_use_cases: components["schemas"]["ItemsGrantUseCases"];
  nc_evolutions: components["schemas"]["ItemsNcEvolutions"];
  posts: components["schemas"]["ItemsPosts"];
  project_use_cases: components["schemas"]["ItemsProjectUseCases"];
  projects: components["schemas"]["ItemsProjects"];
  providers: components["schemas"]["ItemsProviders"];
  queries: components["schemas"]["ItemsQueries"];
  replies: components["schemas"]["ItemsReplies"];
  rfp_priorities: components["schemas"]["ItemsRfpPriorities"];
  rfp_statuses: components["schemas"]["ItemsRfpStatuses"];
  rfp_use_cases: components["schemas"]["ItemsRfpUseCases"];
  rfps: components["schemas"]["ItemsRfps"];
  use_cases: components["schemas"]["ItemsUseCases"];
};